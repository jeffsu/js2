
#line 1 "tokenizer.rl"
# Somewhat based on http://www.mozilla.org/js/language/js20-2000-07/formal/lexer-grammar.html
# Regular Expression Literals determined with these rules:
#  http://www.mozilla.org/js/language/js20-1999-03-25/tokens.html

 
#line 414 "tokenizer.rl"


require 'rubygems'
require 'inline'

class JS2::Parser::Tokenizer
  attr_accessor :data

  inline do |builder|
    builder.c_raw <<-END

    int tokenize (int argc, VALUE *argv, VALUE self) {
      // convert ruby string to char*
      VALUE r_str     = argv[0];
      int data_length = RSTRING(r_str)->len;
      char* data      = STR2CSTR(r_str);

      int in_class  = 0;
      int in_module = 0;
      int close_on_semi = 0;
      int classable     = 1;
      int in_foreach = 0;

      // start vars
      VALUE start_argv[3];
      ID start_sym = rb_intern("start_node");

      // stop vars
      VALUE stop_argv[1];
      ID stop_sym = rb_intern("stop_node");

      // mark vars
      VALUE mark_argv[1];
      ID mark_sym = rb_intern("mark_node");
      int mark_on_br = -1;


      VALUE warn_intv[1];
      ID warn_sym = rb_intern("warn_int");


      // state vars
      int i = 0; // iterator
      int j = 0; // iterator

      char keyword[100]; // keyword
      char single;
      int is_static = 0;
      int is_private = 0;

      // curly handling
      int curlies[1000];
      curlies[0]    = 0;
      int curly_idx = 0; // on purpose!
      int cb_count  = 0;
      int br_count  = 0;
      int close_on_br = 0;

            // CLASS
      ID  sym_CLASS = ID2SYM(rb_intern("CLASS"));
      // METHOD
      ID  sym_METHOD = ID2SYM(rb_intern("METHOD"));
      // MEMBER
      ID  sym_MEMBER = ID2SYM(rb_intern("MEMBER"));
      // STUFF
      ID  sym_STUFF = ID2SYM(rb_intern("STUFF"));
      // ACCESSOR
      ID  sym_ACCESSOR = ID2SYM(rb_intern("ACCESSOR"));
      // COMMENT
      ID  sym_COMMENT = ID2SYM(rb_intern("COMMENT"));
      // FOREACH
      ID  sym_FOREACH = ID2SYM(rb_intern("FOREACH"));
      // MODULE
      ID  sym_MODULE = ID2SYM(rb_intern("MODULE"));
      // INCLUDE
      ID  sym_INCLUDE = ID2SYM(rb_intern("INCLUDE"));
      // CURRY
      ID  sym_CURRY = ID2SYM(rb_intern("CURRY"));
      // PROPERTY
      ID  sym_PROPERTY = ID2SYM(rb_intern("PROPERTY"));
      // PRIVATE
      ID  sym_PRIVATE = ID2SYM(rb_intern("PRIVATE"));
      // STATIC
      ID  sym_STATIC = ID2SYM(rb_intern("STATIC"));

      // ragel variables
      int cs, act;
      char *ts  = NULL;
      char *te  = NULL;
      char *p   = data;
      char *pe  = p + data_length;
      char *eof = pe;
      char* regexp_start = NULL;

            ;

      start_argv[0] = sym_STUFF;
      start_argv[1] = INT2FIX(0);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;


      
#line 114 "tokenizer.c"
static const unsigned char _dude_actions[] = {
	0, 1, 1, 1, 2, 1, 3, 1, 
	4, 1, 5, 1, 6, 1, 7, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 1, 
	97, 1, 98, 1, 99, 1, 100, 1, 
	101, 1, 102, 1, 103, 1, 104, 1, 
	105, 1, 106, 1, 107, 1, 108, 1, 
	109, 1, 110, 1, 111, 1, 112, 1, 
	113, 1, 114, 1, 115, 1, 116, 1, 
	117, 1, 118, 1, 119, 1, 120, 1, 
	121, 1, 122, 1, 123, 1, 124, 1, 
	125, 1, 126, 1, 127, 1, 128, 1, 
	129, 1, 130, 1, 131, 1, 132, 1, 
	133, 1, 134, 1, 135, 1, 136, 1, 
	137, 1, 138, 1, 139, 2, 7, 0, 
	2, 7, 8, 2, 7, 9, 2, 7, 
	10, 2, 7, 11, 2, 7, 12, 2, 
	7, 13, 2, 7, 14, 2, 7, 15, 
	2, 7, 16
};

static const short _dude_key_offsets[] = {
	0, 1, 2, 3, 4, 5, 6, 7, 
	10, 11, 12, 13, 14, 15, 16, 17, 
	28, 29, 31, 32, 33, 34, 35, 38, 
	39, 40, 41, 42, 43, 46, 50, 51, 
	52, 53, 54, 55, 58, 63, 64, 65, 
	68, 79, 83, 87, 91, 93, 97, 101, 
	105, 107, 111, 114, 120, 126, 132, 138, 
	142, 146, 150, 152, 156, 160, 164, 166, 
	170, 174, 178, 180, 184, 188, 192, 194, 
	198, 202, 206, 208, 212, 216, 220, 222, 
	226, 229, 235, 241, 247, 253, 257, 261, 
	265, 267, 271, 275, 279, 281, 285, 289, 
	293, 295, 299, 303, 307, 309, 313, 317, 
	321, 323, 327, 331, 335, 337, 341, 345, 
	349, 351, 353, 357, 359, 363, 367, 371, 
	373, 377, 381, 385, 387, 391, 395, 399, 
	401, 405, 409, 413, 415, 419, 422, 426, 
	427, 431, 435, 439, 441, 445, 449, 453, 
	455, 459, 463, 467, 469, 473, 477, 481, 
	483, 487, 491, 495, 497, 501, 505, 509, 
	511, 515, 519, 523, 525, 529, 533, 537, 
	539, 543, 547, 551, 553, 557, 561, 565, 
	567, 571, 575, 579, 581, 585, 589, 593, 
	595, 599, 603, 607, 609, 613, 617, 621, 
	623, 627, 631, 635, 637, 641, 645, 649, 
	651, 655, 659, 663, 665, 669, 673, 677, 
	679, 683, 687, 691, 693, 697, 701, 705, 
	707, 711, 715, 719, 721, 726, 730, 734, 
	738, 740, 744, 748, 752, 754, 758, 762, 
	766, 768, 772, 776, 780, 782, 786, 790, 
	794, 796, 800, 804, 808, 810, 822, 826, 
	830, 832, 836, 840, 844, 846, 850, 854, 
	858, 860, 872, 885, 890, 891, 892, 893, 
	897, 909, 922, 927, 931, 935, 939, 941, 
	945, 949, 953, 955, 959, 963, 967, 969, 
	973, 977, 981, 983, 987, 991, 995, 997, 
	1001, 1005, 1009, 1011, 1015, 1019, 1023, 1025, 
	1029, 1033, 1037, 1039, 1043, 1047, 1051, 1053, 
	1057, 1061, 1065, 1067, 1071, 1075, 1079, 1081, 
	1085, 1089, 1093, 1095, 1100, 1104, 1105, 1106, 
	1117, 1128, 1132, 1136, 1138, 1142, 1146, 1150, 
	1152, 1156, 1160, 1164, 1166, 1170, 1174, 1178, 
	1180, 1184, 1188, 1192, 1194, 1198, 1202, 1206, 
	1208, 1212, 1216, 1220, 1222, 1234, 1238, 1242, 
	1244, 1248, 1252, 1256, 1258, 1270, 1274, 1278, 
	1280, 1284, 1288, 1292, 1294, 1298, 1302, 1306, 
	1308, 1312, 1316, 1320, 1322, 1326, 1330, 1334, 
	1336, 1340, 1344, 1348, 1350, 1354, 1358, 1362, 
	1364, 1368, 1372, 1376, 1378, 1382, 1386, 1390, 
	1392, 1396, 1400, 1404, 1406, 1410, 1414, 1418, 
	1420, 1424, 1428, 1432, 1434, 1438, 1442, 1446, 
	1448, 1452, 1456, 1460, 1462, 1466, 1470, 1474, 
	1476, 1480, 1484, 1488, 1490, 1494, 1498, 1502, 
	1504, 1508, 1512, 1516, 1518, 1522, 1526, 1530, 
	1532, 1536, 1540, 1544, 1546, 1550, 1554, 1558, 
	1560, 1564, 1568, 1572, 1574, 1578, 1582, 1586, 
	1588, 1592, 1596, 1600, 1602, 1658, 1663, 1671, 
	1679, 1691, 1702, 1710, 1711, 1716, 1719, 1723, 
	1726, 1730, 1734, 1737, 1745, 1750, 1753, 1757, 
	1760, 1762, 1767, 1770, 1773, 1777, 1780, 1784, 
	1788, 1791, 1796, 1799, 1803, 1806, 1812, 1815, 
	1819, 1822, 1826, 1829, 1839, 1842, 1847, 1851, 
	1853, 1858, 1862, 1865, 1868, 1872, 1875, 1881, 
	1884, 1885, 1889, 1893, 1898, 1900, 1902, 1906, 
	1909, 1920, 1928, 1938, 1949, 1954, 1957, 1960, 
	1966, 1969, 1974, 1977, 1981, 1984, 1988, 1991, 
	1996, 1999, 2004, 2007, 2011, 2014, 2020, 2023, 
	2027, 2030, 2036, 2039, 2043, 2046, 2051, 2054, 
	2058, 2061, 2065, 2068, 2072, 2075, 2079, 2082, 
	2088, 2091, 2095, 2098, 2101, 2104, 2114, 2123, 
	2132, 2141, 2150, 2159, 2168, 2180, 2183, 2192, 
	2201, 2210, 2219, 2228, 2237, 2248, 2257, 2266, 
	2275, 2284, 2293, 2302, 2311, 2320, 2332, 2335, 
	2344, 2353, 2366, 2376, 2385, 2397, 2400, 2409, 
	2418, 2430, 2433, 2442, 2451, 2460, 2469, 2478, 
	2490, 2498, 2501, 2510, 2520, 2529, 2541, 2544, 
	2553, 2562, 2571, 2580, 2592, 2595, 2604, 2613, 
	2622, 2635, 2640, 2644, 2647, 2656, 2665, 2674, 
	2686, 2696, 2707, 2716, 2725, 2734, 2743, 2752, 
	2764, 2767, 2776, 2785, 2794, 2803, 2815, 2818, 
	2827, 2836, 2845, 2857, 2860, 2873, 2876, 2885, 
	2894, 2905, 2914, 2923, 2935, 2938, 2947, 2956, 
	2968, 2971, 2981, 2990, 2999, 3008, 3020, 3023, 
	3032, 3041, 3050, 3059, 3071, 3074, 3087, 3096, 
	3105, 3114, 3124, 3133, 3142, 3154, 3157, 3166, 
	3175, 3188, 3191, 3200, 3212, 3215, 3224, 3233, 
	3242, 3251, 3264, 3267, 3276, 3285, 3294, 3307, 
	3319, 3323, 3334, 3337, 3340, 3349, 3358, 3367, 
	3376, 3385, 3394, 3406, 3409, 3418, 3427, 3436, 
	3448, 3451, 3462, 3474, 3477, 3486, 3496, 3505, 
	3514, 3523, 3532, 3541, 3550, 3562, 3565, 3574, 
	3583, 3595, 3598, 3613, 3616, 3625, 3634, 3643, 
	3652, 3664, 3672, 3675, 3684, 3693, 3702, 3711, 
	3720, 3729, 3738, 3750, 3753, 3762, 3771, 3780, 
	3789, 3798, 3807, 3816, 3825, 3834, 3843, 3852, 
	3861, 3870, 3882, 3890, 3893, 3904, 3913, 3922, 
	3931, 3940, 3952, 3955, 3964, 3976, 3979, 3988, 
	3997, 4008, 4017, 4026, 4035, 4044, 4053, 4065, 
	4068, 4078, 4087, 4096, 4105, 4114, 4126, 4129, 
	4139, 4148, 4157, 4166, 4175, 4184, 4193, 4202, 
	4211, 4220, 4232, 4235, 4244, 4253, 4262, 4271, 
	4283, 4286, 4295, 4304, 4313, 4322, 4331, 4343, 
	4346, 4359, 4368, 4377, 4386, 4395, 4404, 4413, 
	4425, 4428, 4437, 4446, 4455, 4464, 4473, 4482, 
	4494, 4497, 4506, 4515, 4524, 4533, 4542, 4551, 
	4560, 4569, 4578, 4587, 4599, 4602, 4613, 4623, 
	4632, 4641, 4650, 4663, 4666, 4678, 4681, 4692, 
	4701, 4710, 4719, 4728, 4737, 4746, 4758, 4761, 
	4773, 4776, 4785, 4794, 4803, 4812, 4824, 4827, 
	4837, 4846, 4858, 4861, 4871, 4880, 4889, 4898, 
	4907, 4916, 4925, 4937, 4940, 4950, 4959, 4968, 
	4977, 4989, 4992, 5001, 5010, 5022, 5025, 5031, 
	5034, 5038, 5041, 5046, 5049
};

static const char _dude_trans_keys[] = {
	99, 99, 101, 115, 115, 111, 114, 32, 
	9, 13, 117, 110, 99, 116, 105, 111, 
	110, 32, 36, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 114, 105, 111, 118, 
	97, 116, 101, 32, 9, 13, 112, 101, 
	114, 116, 121, 32, 9, 13, 32, 44, 
	9, 13, 116, 97, 116, 105, 99, 32, 
	9, 13, 32, 102, 118, 9, 13, 97, 
	114, 32, 9, 13, 32, 36, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 34, 92, 0, 31, 117, 
	0, 31, 48, 57, 65, 70, 97, 102, 
	48, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 39, 92, 
	0, 31, 117, 0, 31, 48, 57, 65, 
	70, 97, 102, 48, 57, 65, 70, 97, 
	102, 48, 57, 65, 70, 97, 102, 48, 
	57, 65, 70, 97, 102, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 48, 
	57, 43, 45, 48, 57, 48, 57, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 10, 
	13, 42, 47, 10, 13, 42, 10, 13, 
	42, 47, 47, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 61, 9, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 36, 41, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 36, 41, 44, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 41, 44, 
	9, 13, 105, 116, 104, 32, 40, 9, 
	13, 32, 36, 41, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 36, 41, 
	44, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 44, 9, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	47, 9, 13, 10, 13, 47, 92, 10, 
	13, 47, 92, 10, 13, 32, 47, 9, 
	13, 10, 13, 47, 92, 10, 13, 47, 
	92, 10, 13, 32, 47, 9, 13, 10, 
	13, 47, 92, 10, 13, 47, 92, 10, 
	13, 32, 47, 9, 13, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 32, 
	40, 47, 9, 13, 32, 118, 9, 13, 
	97, 114, 32, 36, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 36, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 32, 47, 9, 13, 10, 13, 
	47, 92, 10, 13, 47, 92, 10, 13, 
	32, 47, 9, 13, 10, 13, 47, 92, 
	10, 13, 47, 92, 10, 13, 32, 47, 
	9, 13, 10, 13, 47, 92, 10, 13, 
	47, 92, 10, 13, 32, 47, 9, 13, 
	10, 13, 47, 92, 10, 13, 47, 92, 
	10, 13, 10, 13, 32, 33, 34, 35, 
	36, 37, 38, 39, 40, 42, 43, 44, 
	45, 46, 47, 48, 58, 59, 60, 61, 
	62, 63, 64, 91, 94, 95, 97, 98, 
	99, 100, 101, 102, 103, 105, 108, 109, 
	110, 112, 114, 115, 116, 118, 119, 124, 
	9, 12, 49, 57, 65, 90, 104, 122, 
	123, 125, 97, 102, 112, 115, 118, 36, 
	95, 48, 57, 65, 90, 97, 122, 36, 
	95, 48, 57, 65, 90, 97, 122, 32, 
	36, 44, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 36, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	48, 57, 65, 90, 97, 122, 61, 32, 
	47, 61, 9, 13, 103, 105, 109, 32, 
	47, 9, 13, 103, 105, 109, 34, 92, 
	0, 31, 32, 47, 9, 13, 103, 105, 
	109, 36, 95, 48, 57, 65, 90, 97, 
	122, 32, 47, 61, 9, 13, 103, 105, 
	109, 32, 47, 9, 13, 103, 105, 109, 
	38, 61, 32, 47, 61, 9, 13, 103, 
	105, 109, 103, 105, 109, 32, 47, 9, 
	13, 103, 105, 109, 39, 92, 0, 31, 
	32, 47, 9, 13, 103, 105, 109, 32, 
	47, 61, 9, 13, 103, 105, 109, 32, 
	47, 9, 13, 103, 105, 109, 32, 43, 
	47, 61, 9, 13, 103, 105, 109, 32, 
	47, 9, 13, 103, 105, 109, 32, 47, 
	9, 13, 103, 105, 109, 32, 45, 47, 
	48, 61, 62, 9, 13, 49, 57, 103, 
	105, 109, 46, 69, 101, 48, 57, 69, 
	101, 48, 57, 48, 57, 46, 69, 101, 
	48, 57, 32, 47, 9, 13, 103, 105, 
	109, 103, 105, 109, 32, 47, 9, 13, 
	103, 105, 109, 32, 42, 47, 61, 9, 
	13, 103, 105, 109, 47, 10, 13, 47, 
	92, 10, 13, 47, 92, 10, 13, 103, 
	105, 109, 10, 13, 10, 13, 32, 47, 
	9, 13, 103, 105, 109, 36, 46, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 48, 57, 65, 90, 97, 122, 
	36, 43, 45, 95, 48, 57, 65, 90, 
	97, 122, 36, 46, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 32, 47, 58, 
	9, 13, 103, 105, 109, 103, 105, 109, 
	32, 47, 60, 61, 9, 13, 103, 105, 
	109, 32, 47, 61, 9, 13, 103, 105, 
	109, 32, 47, 9, 13, 103, 105, 109, 
	32, 47, 9, 13, 103, 105, 109, 32, 
	47, 61, 9, 13, 103, 105, 109, 32, 
	47, 61, 9, 13, 103, 105, 109, 32, 
	47, 9, 13, 103, 105, 109, 32, 47, 
	61, 62, 9, 13, 103, 105, 109, 32, 
	47, 9, 13, 103, 105, 109, 32, 47, 
	61, 62, 9, 13, 103, 105, 109, 32, 
	47, 9, 13, 103, 105, 109, 32, 47, 
	61, 9, 13, 103, 105, 109, 32, 47, 
	9, 13, 103, 105, 109, 32, 47, 9, 
	13, 103, 105, 109, 32, 47, 9, 13, 
	103, 105, 109, 32, 47, 9, 13, 103, 
	105, 109, 32, 47, 61, 94, 9, 13, 
	103, 105, 109, 32, 47, 9, 13, 103, 
	105, 109, 103, 105, 109, 103, 105, 109, 
	36, 95, 98, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	99, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	32, 36, 47, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 103, 105, 109, 36, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	114, 121, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	32, 36, 47, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 103, 105, 109, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 104, 108, 111, 117, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 32, 36, 47, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 103, 105, 109, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 115, 48, 
	57, 65, 90, 97, 122, 36, 95, 115, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 36, 95, 48, 57, 65, 90, 
	97, 122, 103, 105, 109, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 32, 36, 47, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 103, 105, 109, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 121, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	40, 95, 119, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 40, 119, 9, 13, 
	32, 119, 9, 13, 32, 9, 13, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 32, 36, 40, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 98, 102, 108, 48, 57, 65, 
	90, 97, 122, 36, 95, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 103, 48, 
	57, 65, 90, 97, 122, 36, 95, 103, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	32, 36, 47, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 103, 105, 109, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 32, 36, 47, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 103, 
	105, 109, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 32, 36, 47, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 103, 105, 109, 32, 36, 47, 95, 
	117, 9, 13, 48, 57, 65, 90, 97, 
	122, 103, 105, 109, 36, 95, 98, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 110, 120, 48, 57, 65, 90, 97, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 32, 36, 47, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 103, 
	105, 109, 36, 95, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 109, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 112, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	32, 36, 47, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 103, 105, 109, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 32, 36, 47, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 103, 
	105, 109, 36, 95, 97, 105, 108, 111, 
	117, 48, 57, 65, 90, 98, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 103, 105, 109, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 32, 
	36, 47, 95, 108, 9, 13, 48, 57, 
	65, 90, 97, 122, 103, 105, 109, 36, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	32, 36, 47, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 103, 105, 109, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 32, 36, 47, 95, 101, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 104, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	40, 47, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 36, 58, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	58, 9, 13, 32, 36, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 9, 
	13, 103, 105, 109, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 102, 109, 110, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 103, 105, 109, 36, 95, 112, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 109, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 115, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 103, 105, 109, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 32, 
	36, 47, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 103, 105, 109, 32, 36, 
	47, 95, 99, 115, 116, 9, 13, 48, 
	57, 65, 90, 97, 122, 103, 105, 109, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	36, 95, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	99, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 102, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 102, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 103, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 36, 95, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 36, 95, 48, 57, 65, 90, 
	97, 122, 103, 105, 109, 36, 95, 97, 
	101, 117, 48, 57, 65, 90, 98, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 105, 48, 57, 65, 90, 
	97, 122, 36, 95, 118, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 119, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 108, 48, 57, 
	65, 90, 97, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	114, 117, 48, 57, 65, 90, 98, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 107, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 103, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 32, 36, 47, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 103, 105, 109, 36, 95, 105, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	118, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 36, 95, 112, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	121, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 100, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 98, 48, 57, 
	65, 90, 97, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	99, 48, 57, 65, 90, 97, 122, 32, 
	36, 47, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 103, 105, 109, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 32, 36, 47, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 103, 
	105, 109, 36, 95, 104, 116, 117, 119, 
	121, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 32, 36, 47, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 103, 105, 109, 36, 95, 112, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 104, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 122, 48, 57, 65, 90, 97, 
	121, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 32, 36, 47, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 103, 
	105, 109, 36, 95, 104, 114, 121, 48, 
	57, 65, 90, 97, 122, 36, 95, 105, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 119, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 115, 9, 
	13, 48, 57, 65, 90, 97, 122, 103, 
	105, 109, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 36, 95, 97, 117, 121, 48, 57, 
	65, 90, 98, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 115, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 32, 36, 47, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 103, 105, 109, 
	36, 95, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 102, 48, 57, 
	65, 90, 97, 122, 32, 36, 47, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	103, 105, 109, 36, 95, 97, 111, 48, 
	57, 65, 90, 98, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 32, 36, 
	47, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 103, 105, 109, 36, 95, 105, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 108, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 32, 36, 47, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 103, 105, 109, 36, 95, 104, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 32, 36, 47, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 103, 105, 109, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 32, 36, 47, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 103, 105, 
	109, 32, 47, 61, 124, 9, 13, 103, 
	105, 109, 32, 47, 9, 13, 103, 105, 
	109, 32, 47, 61, 9, 13, 103, 105, 
	109, 103, 105, 109, 0
};

static const char _dude_single_lengths[] = {
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	3, 2, 4, 4, 2, 2, 4, 4, 
	2, 2, 1, 0, 0, 0, 0, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	1, 0, 0, 0, 0, 2, 4, 4, 
	2, 2, 4, 4, 2, 2, 4, 4, 
	2, 2, 4, 4, 2, 2, 4, 4, 
	2, 2, 4, 4, 2, 2, 4, 4, 
	2, 0, 2, 0, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 4, 3, 4, 1, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 3, 2, 4, 4, 
	2, 2, 4, 4, 2, 2, 4, 4, 
	2, 2, 4, 4, 2, 2, 4, 4, 
	2, 2, 4, 4, 2, 4, 4, 4, 
	2, 2, 4, 4, 2, 2, 4, 4, 
	2, 4, 5, 3, 1, 1, 1, 2, 
	4, 5, 3, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 2, 4, 4, 2, 2, 
	4, 4, 2, 3, 2, 1, 1, 3, 
	3, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 4, 4, 4, 2, 
	2, 4, 4, 2, 4, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 2, 4, 4, 2, 
	2, 4, 4, 2, 46, 5, 2, 2, 
	4, 3, 2, 1, 3, 3, 2, 3, 
	2, 2, 3, 2, 3, 3, 2, 3, 
	2, 3, 3, 3, 2, 3, 2, 2, 
	3, 3, 3, 2, 3, 4, 3, 2, 
	3, 2, 3, 6, 3, 3, 2, 0, 
	3, 2, 3, 3, 2, 3, 4, 3, 
	1, 4, 4, 5, 2, 2, 2, 3, 
	5, 2, 4, 5, 3, 3, 3, 4, 
	3, 3, 3, 2, 3, 2, 3, 3, 
	3, 3, 3, 2, 3, 4, 3, 2, 
	3, 4, 3, 2, 3, 3, 3, 2, 
	3, 2, 3, 2, 3, 2, 3, 4, 
	3, 2, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 3, 3, 
	3, 7, 4, 3, 4, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 4, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	5, 3, 2, 1, 3, 3, 3, 4, 
	4, 5, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 4, 3, 5, 3, 3, 3, 
	5, 3, 3, 4, 3, 3, 3, 4, 
	3, 4, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 4, 3, 7, 3, 3, 
	3, 4, 3, 3, 4, 3, 3, 3, 
	5, 3, 3, 4, 3, 3, 3, 3, 
	3, 5, 3, 3, 3, 3, 5, 4, 
	2, 3, 1, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 4, 
	3, 5, 4, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	4, 3, 7, 3, 3, 3, 3, 3, 
	4, 2, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 2, 3, 5, 3, 3, 3, 
	3, 4, 3, 3, 4, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 4, 3, 
	4, 3, 3, 3, 3, 4, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	7, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 4, 3, 5, 4, 3, 
	3, 3, 5, 3, 4, 3, 5, 3, 
	3, 3, 3, 3, 3, 4, 3, 4, 
	3, 3, 3, 3, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 3, 3, 3, 
	3, 3, 4, 3, 4, 3, 3, 3, 
	4, 3, 3, 3, 4, 3, 4, 3, 
	2, 3, 3, 3, 3
};

static const char _dude_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	4, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 1, 3, 3, 3, 3, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	1, 3, 3, 3, 3, 1, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 1, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 4, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 4, 4, 1, 0, 0, 0, 1, 
	4, 4, 1, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 0, 0, 4, 
	4, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 4, 0, 0, 0, 
	1, 0, 0, 0, 4, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 5, 0, 3, 3, 
	4, 4, 3, 0, 1, 0, 1, 0, 
	1, 1, 0, 3, 1, 0, 1, 0, 
	0, 1, 0, 0, 1, 0, 1, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 2, 0, 1, 1, 1, 
	1, 1, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	3, 3, 3, 3, 1, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 4, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 0, 3, 
	3, 3, 3, 3, 4, 0, 3, 3, 
	4, 0, 3, 3, 3, 3, 3, 4, 
	3, 0, 3, 3, 3, 4, 0, 3, 
	3, 3, 3, 4, 0, 3, 3, 3, 
	4, 1, 1, 1, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	0, 3, 3, 3, 3, 4, 0, 3, 
	3, 3, 4, 0, 4, 0, 3, 3, 
	3, 3, 3, 4, 0, 3, 3, 4, 
	0, 3, 3, 3, 3, 4, 0, 3, 
	3, 3, 3, 4, 0, 3, 3, 3, 
	3, 3, 3, 3, 4, 0, 3, 3, 
	4, 0, 3, 4, 0, 3, 3, 3, 
	3, 4, 0, 3, 3, 3, 4, 4, 
	1, 4, 1, 0, 3, 3, 3, 3, 
	3, 3, 4, 0, 3, 3, 3, 4, 
	0, 3, 4, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 4, 0, 3, 3, 
	4, 0, 4, 0, 3, 3, 3, 3, 
	4, 3, 0, 3, 3, 3, 3, 3, 
	3, 3, 4, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 3, 0, 3, 3, 3, 3, 
	3, 4, 0, 3, 4, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 0, 
	3, 3, 3, 3, 3, 4, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 0, 3, 3, 3, 3, 4, 
	0, 3, 3, 3, 3, 3, 4, 0, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	0, 3, 3, 3, 3, 3, 3, 4, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 4, 0, 3, 3, 3, 
	3, 3, 4, 0, 4, 0, 3, 3, 
	3, 3, 3, 3, 3, 4, 0, 4, 
	0, 3, 3, 3, 3, 4, 0, 3, 
	3, 4, 0, 3, 3, 3, 3, 3, 
	3, 3, 4, 0, 3, 3, 3, 3, 
	4, 0, 3, 3, 4, 0, 1, 0, 
	1, 0, 1, 0, 0
};

static const short _dude_index_offsets[] = {
	0, 2, 4, 6, 8, 10, 12, 14, 
	17, 19, 21, 23, 25, 27, 29, 31, 
	39, 41, 44, 46, 48, 50, 52, 55, 
	57, 59, 61, 63, 65, 68, 72, 74, 
	76, 78, 80, 82, 85, 90, 92, 94, 
	97, 105, 109, 114, 119, 122, 126, 131, 
	136, 139, 143, 146, 150, 154, 158, 162, 
	166, 171, 176, 179, 183, 188, 193, 196, 
	200, 205, 210, 213, 217, 222, 227, 230, 
	234, 239, 244, 247, 251, 256, 261, 264, 
	268, 271, 275, 279, 283, 287, 291, 296, 
	301, 304, 308, 313, 318, 321, 325, 330, 
	335, 338, 342, 347, 352, 355, 359, 364, 
	369, 372, 376, 381, 386, 389, 393, 398, 
	403, 406, 408, 412, 414, 418, 423, 428, 
	431, 435, 440, 445, 448, 452, 457, 462, 
	465, 469, 474, 479, 482, 487, 491, 496, 
	498, 502, 507, 512, 515, 519, 524, 529, 
	532, 536, 541, 546, 549, 553, 558, 563, 
	566, 570, 575, 580, 583, 587, 592, 597, 
	600, 604, 609, 614, 617, 621, 626, 631, 
	634, 638, 643, 648, 651, 655, 660, 665, 
	668, 672, 677, 682, 685, 689, 694, 699, 
	702, 706, 711, 716, 719, 723, 728, 733, 
	736, 740, 745, 750, 753, 757, 762, 767, 
	770, 774, 779, 784, 787, 791, 796, 801, 
	804, 808, 813, 818, 821, 825, 830, 835, 
	838, 842, 847, 852, 855, 860, 864, 869, 
	874, 877, 881, 886, 891, 894, 898, 903, 
	908, 911, 915, 920, 925, 928, 932, 937, 
	942, 945, 949, 954, 959, 962, 971, 976, 
	981, 984, 988, 993, 998, 1001, 1005, 1010, 
	1015, 1018, 1027, 1037, 1042, 1044, 1046, 1048, 
	1052, 1061, 1071, 1076, 1080, 1085, 1090, 1093, 
	1097, 1102, 1107, 1110, 1114, 1119, 1124, 1127, 
	1131, 1136, 1141, 1144, 1148, 1153, 1158, 1161, 
	1165, 1170, 1175, 1178, 1182, 1187, 1192, 1195, 
	1199, 1204, 1209, 1212, 1216, 1221, 1226, 1229, 
	1233, 1238, 1243, 1246, 1250, 1255, 1260, 1263, 
	1267, 1272, 1277, 1280, 1285, 1289, 1291, 1293, 
	1301, 1309, 1314, 1319, 1322, 1326, 1331, 1336, 
	1339, 1343, 1348, 1353, 1356, 1360, 1365, 1370, 
	1373, 1377, 1382, 1387, 1390, 1394, 1399, 1404, 
	1407, 1411, 1416, 1421, 1424, 1433, 1438, 1443, 
	1446, 1450, 1455, 1460, 1463, 1472, 1477, 1482, 
	1485, 1489, 1494, 1499, 1502, 1506, 1511, 1516, 
	1519, 1523, 1528, 1533, 1536, 1540, 1545, 1550, 
	1553, 1557, 1562, 1567, 1570, 1574, 1579, 1584, 
	1587, 1591, 1596, 1601, 1604, 1608, 1613, 1618, 
	1621, 1625, 1630, 1635, 1638, 1642, 1647, 1652, 
	1655, 1659, 1664, 1669, 1672, 1676, 1681, 1686, 
	1689, 1693, 1698, 1703, 1706, 1710, 1715, 1720, 
	1723, 1727, 1732, 1737, 1740, 1744, 1749, 1754, 
	1757, 1761, 1766, 1771, 1774, 1778, 1783, 1788, 
	1791, 1795, 1800, 1805, 1808, 1812, 1817, 1822, 
	1825, 1829, 1834, 1839, 1842, 1846, 1851, 1856, 
	1859, 1863, 1868, 1873, 1876, 1928, 1934, 1940, 
	1946, 1955, 1963, 1969, 1971, 1976, 1980, 1984, 
	1988, 1992, 1996, 2000, 2006, 2011, 2015, 2019, 
	2023, 2026, 2031, 2035, 2039, 2043, 2047, 2051, 
	2055, 2059, 2064, 2068, 2072, 2076, 2082, 2086, 
	2090, 2094, 2098, 2102, 2111, 2115, 2120, 2124, 
	2126, 2131, 2135, 2139, 2143, 2147, 2151, 2157, 
	2161, 2163, 2168, 2173, 2179, 2182, 2185, 2189, 
	2193, 2202, 2208, 2216, 2225, 2230, 2234, 2238, 
	2244, 2248, 2253, 2257, 2261, 2265, 2269, 2273, 
	2278, 2282, 2287, 2291, 2295, 2299, 2305, 2309, 
	2313, 2317, 2323, 2327, 2331, 2335, 2340, 2344, 
	2348, 2352, 2356, 2360, 2364, 2368, 2372, 2376, 
	2382, 2386, 2390, 2394, 2398, 2402, 2410, 2417, 
	2424, 2431, 2438, 2445, 2452, 2461, 2465, 2472, 
	2479, 2486, 2493, 2500, 2507, 2516, 2523, 2530, 
	2537, 2544, 2551, 2558, 2565, 2572, 2581, 2585, 
	2592, 2599, 2610, 2618, 2625, 2634, 2638, 2645, 
	2652, 2661, 2665, 2672, 2679, 2686, 2693, 2700, 
	2709, 2715, 2719, 2726, 2734, 2741, 2750, 2754, 
	2761, 2768, 2775, 2782, 2791, 2795, 2802, 2809, 
	2816, 2826, 2831, 2835, 2838, 2845, 2852, 2859, 
	2868, 2876, 2885, 2892, 2899, 2906, 2913, 2920, 
	2929, 2933, 2940, 2947, 2954, 2961, 2970, 2974, 
	2981, 2988, 2995, 3004, 3008, 3018, 3022, 3029, 
	3036, 3045, 3052, 3059, 3068, 3072, 3079, 3086, 
	3095, 3099, 3107, 3114, 3121, 3128, 3137, 3141, 
	3148, 3155, 3162, 3169, 3178, 3182, 3193, 3200, 
	3207, 3214, 3222, 3229, 3236, 3245, 3249, 3256, 
	3263, 3273, 3277, 3284, 3293, 3297, 3304, 3311, 
	3318, 3325, 3335, 3339, 3346, 3353, 3360, 3370, 
	3379, 3383, 3391, 3394, 3398, 3405, 3412, 3419, 
	3426, 3433, 3440, 3449, 3453, 3460, 3467, 3474, 
	3483, 3487, 3496, 3505, 3509, 3516, 3524, 3531, 
	3538, 3545, 3552, 3559, 3566, 3575, 3579, 3586, 
	3593, 3602, 3606, 3618, 3622, 3629, 3636, 3643, 
	3650, 3659, 3665, 3669, 3676, 3683, 3690, 3697, 
	3704, 3711, 3718, 3727, 3731, 3738, 3745, 3752, 
	3759, 3766, 3773, 3780, 3787, 3794, 3801, 3808, 
	3815, 3822, 3831, 3837, 3841, 3850, 3857, 3864, 
	3871, 3878, 3887, 3891, 3898, 3907, 3911, 3918, 
	3925, 3934, 3941, 3948, 3955, 3962, 3969, 3978, 
	3982, 3990, 3997, 4004, 4011, 4018, 4027, 4031, 
	4039, 4046, 4053, 4060, 4067, 4074, 4081, 4088, 
	4095, 4102, 4111, 4115, 4122, 4129, 4136, 4143, 
	4152, 4156, 4163, 4170, 4177, 4184, 4191, 4200, 
	4204, 4215, 4222, 4229, 4236, 4243, 4250, 4257, 
	4266, 4270, 4277, 4284, 4291, 4298, 4305, 4312, 
	4321, 4325, 4332, 4339, 4346, 4353, 4360, 4367, 
	4374, 4381, 4388, 4395, 4404, 4408, 4417, 4425, 
	4432, 4439, 4446, 4456, 4460, 4469, 4473, 4482, 
	4489, 4496, 4503, 4510, 4517, 4524, 4533, 4537, 
	4546, 4550, 4557, 4564, 4571, 4578, 4587, 4591, 
	4599, 4606, 4615, 4619, 4627, 4634, 4641, 4648, 
	4655, 4662, 4669, 4678, 4682, 4690, 4697, 4704, 
	4711, 4720, 4724, 4731, 4738, 4747, 4751, 4757, 
	4761, 4765, 4769, 4774, 4778
};

static const short _dude_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 8, 
	0, 9, 0, 10, 0, 11, 0, 12, 
	0, 13, 0, 14, 0, 15, 0, 15, 
	16, 16, 15, 16, 16, 16, 0, 17, 
	0, 18, 19, 0, 20, 0, 21, 0, 
	22, 0, 23, 0, 24, 24, 0, 25, 
	0, 26, 0, 27, 0, 28, 0, 29, 
	0, 30, 30, 0, 32, 33, 32, 31, 
	34, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 39, 0, 39, 40, 41, 
	39, 0, 42, 0, 43, 0, 44, 44, 
	0, 44, 45, 45, 44, 45, 45, 45, 
	0, 47, 48, 47, 46, 46, 46, 46, 
	50, 49, 46, 46, 51, 50, 49, 46, 
	46, 49, 52, 53, 52, 46, 46, 46, 
	46, 55, 54, 46, 46, 56, 55, 54, 
	46, 46, 54, 59, 60, 57, 58, 62, 
	57, 61, 63, 63, 63, 57, 64, 64, 
	64, 57, 65, 65, 65, 57, 66, 66, 
	66, 57, 67, 68, 67, 57, 57, 57, 
	57, 70, 69, 57, 57, 71, 70, 69, 
	57, 57, 69, 72, 73, 72, 57, 57, 
	57, 57, 75, 74, 57, 57, 76, 75, 
	74, 57, 57, 74, 77, 78, 77, 46, 
	46, 46, 46, 80, 79, 46, 46, 81, 
	80, 79, 46, 46, 79, 82, 83, 82, 
	46, 46, 46, 46, 85, 84, 46, 46, 
	86, 85, 84, 46, 46, 84, 87, 88, 
	87, 46, 46, 46, 46, 90, 89, 46, 
	46, 91, 90, 89, 46, 46, 89, 92, 
	93, 92, 46, 46, 46, 46, 95, 94, 
	46, 46, 96, 95, 94, 46, 46, 94, 
	59, 98, 57, 97, 100, 57, 99, 101, 
	101, 101, 57, 102, 102, 102, 57, 103, 
	103, 103, 57, 104, 104, 104, 57, 105, 
	106, 105, 57, 57, 57, 57, 108, 107, 
	57, 57, 109, 108, 107, 57, 57, 107, 
	110, 111, 110, 57, 57, 57, 57, 113, 
	112, 57, 57, 114, 113, 112, 57, 57, 
	112, 115, 116, 115, 46, 46, 46, 46, 
	118, 117, 46, 46, 119, 118, 117, 46, 
	46, 117, 120, 121, 120, 57, 57, 57, 
	57, 123, 122, 57, 57, 124, 123, 122, 
	57, 57, 122, 125, 126, 125, 46, 46, 
	46, 46, 128, 127, 46, 46, 129, 128, 
	127, 46, 46, 127, 130, 131, 130, 57, 
	57, 57, 57, 133, 132, 57, 57, 134, 
	133, 132, 57, 57, 132, 135, 136, 135, 
	57, 57, 57, 57, 138, 137, 57, 57, 
	139, 138, 137, 57, 57, 137, 141, 140, 
	142, 142, 143, 140, 143, 0, 144, 145, 
	144, 46, 46, 46, 46, 147, 146, 46, 
	46, 148, 147, 146, 46, 46, 146, 149, 
	150, 149, 57, 57, 57, 57, 152, 151, 
	57, 57, 153, 152, 151, 57, 57, 151, 
	154, 155, 154, 57, 57, 57, 57, 157, 
	156, 57, 57, 158, 157, 156, 57, 57, 
	156, 159, 160, 159, 57, 57, 57, 57, 
	162, 161, 57, 57, 163, 162, 161, 57, 
	57, 161, 165, 165, 166, 167, 164, 165, 
	165, 166, 164, 165, 165, 166, 168, 164, 
	165, 0, 169, 170, 169, 46, 46, 46, 
	46, 172, 171, 46, 46, 173, 172, 171, 
	46, 46, 171, 174, 175, 174, 57, 57, 
	57, 57, 177, 176, 57, 57, 178, 177, 
	176, 57, 57, 176, 179, 180, 179, 57, 
	57, 57, 57, 182, 181, 57, 57, 183, 
	182, 181, 57, 57, 181, 184, 185, 184, 
	57, 57, 57, 57, 187, 186, 57, 57, 
	188, 187, 186, 57, 57, 186, 189, 190, 
	189, 46, 46, 46, 46, 192, 191, 46, 
	46, 193, 192, 191, 46, 46, 191, 194, 
	195, 194, 46, 46, 46, 46, 197, 196, 
	46, 46, 198, 197, 196, 46, 46, 196, 
	199, 200, 199, 46, 46, 46, 46, 202, 
	201, 46, 46, 203, 202, 201, 46, 46, 
	201, 204, 205, 204, 57, 57, 57, 57, 
	207, 206, 57, 57, 208, 207, 206, 57, 
	57, 206, 209, 210, 209, 46, 46, 46, 
	46, 212, 211, 46, 46, 213, 212, 211, 
	46, 46, 211, 214, 215, 214, 46, 46, 
	46, 46, 217, 216, 46, 46, 218, 217, 
	216, 46, 46, 216, 219, 220, 219, 57, 
	57, 57, 57, 222, 221, 57, 57, 223, 
	222, 221, 57, 57, 221, 224, 225, 224, 
	46, 46, 46, 46, 227, 226, 46, 46, 
	228, 227, 226, 46, 46, 226, 229, 230, 
	229, 46, 46, 46, 46, 232, 231, 46, 
	46, 233, 232, 231, 46, 46, 231, 234, 
	235, 234, 46, 46, 46, 46, 237, 236, 
	46, 46, 238, 237, 236, 46, 46, 236, 
	239, 240, 239, 46, 46, 46, 46, 242, 
	241, 46, 46, 243, 242, 241, 46, 46, 
	241, 244, 245, 244, 46, 46, 46, 46, 
	247, 246, 46, 46, 248, 247, 246, 46, 
	46, 246, 249, 250, 249, 57, 57, 57, 
	57, 252, 251, 57, 57, 253, 252, 251, 
	57, 57, 251, 254, 255, 254, 57, 57, 
	57, 57, 257, 256, 57, 57, 258, 257, 
	256, 57, 57, 256, 259, 260, 259, 57, 
	57, 57, 57, 262, 261, 57, 57, 263, 
	262, 261, 57, 57, 261, 264, 265, 264, 
	57, 57, 57, 57, 267, 266, 57, 57, 
	268, 267, 266, 57, 57, 266, 269, 270, 
	269, 46, 46, 46, 46, 272, 271, 46, 
	46, 273, 272, 271, 46, 46, 271, 274, 
	275, 276, 274, 57, 274, 275, 274, 57, 
	57, 57, 57, 278, 277, 57, 57, 279, 
	278, 277, 57, 57, 277, 276, 280, 276, 
	57, 57, 57, 57, 282, 281, 57, 57, 
	283, 282, 281, 57, 57, 281, 285, 286, 
	285, 284, 284, 284, 284, 288, 287, 284, 
	284, 289, 288, 287, 284, 284, 287, 291, 
	292, 291, 290, 290, 290, 290, 294, 293, 
	290, 290, 295, 294, 293, 290, 290, 293, 
	296, 297, 296, 290, 290, 290, 290, 299, 
	298, 290, 290, 300, 299, 298, 290, 290, 
	298, 301, 302, 301, 290, 290, 290, 290, 
	304, 303, 290, 290, 305, 304, 303, 290, 
	290, 303, 306, 307, 308, 307, 306, 307, 
	307, 307, 290, 290, 290, 290, 310, 309, 
	290, 290, 311, 310, 309, 290, 290, 309, 
	312, 313, 312, 290, 290, 290, 290, 315, 
	314, 290, 290, 316, 315, 314, 290, 290, 
	314, 317, 318, 317, 290, 290, 290, 290, 
	320, 319, 290, 290, 321, 320, 319, 290, 
	290, 319, 323, 324, 325, 324, 323, 324, 
	324, 324, 322, 326, 324, 325, 323, 324, 
	326, 324, 324, 324, 322, 326, 325, 323, 
	326, 322, 327, 322, 328, 322, 329, 322, 
	329, 330, 329, 0, 330, 331, 332, 331, 
	330, 331, 331, 331, 0, 333, 331, 332, 
	330, 331, 333, 331, 331, 331, 0, 333, 
	332, 330, 333, 0, 334, 335, 334, 290, 
	290, 290, 290, 337, 336, 290, 290, 338, 
	337, 336, 290, 290, 336, 339, 340, 339, 
	290, 290, 290, 290, 342, 341, 290, 290, 
	343, 342, 341, 290, 290, 341, 344, 345, 
	344, 290, 290, 290, 290, 347, 346, 290, 
	290, 348, 347, 346, 290, 290, 346, 349, 
	350, 349, 290, 290, 290, 290, 352, 351, 
	290, 290, 353, 352, 351, 290, 290, 351, 
	354, 355, 354, 290, 290, 290, 290, 357, 
	356, 290, 290, 358, 357, 356, 290, 290, 
	356, 359, 360, 359, 284, 284, 284, 284, 
	362, 361, 284, 284, 363, 362, 361, 284, 
	284, 361, 364, 365, 364, 284, 284, 284, 
	284, 367, 366, 284, 284, 368, 367, 366, 
	284, 284, 366, 369, 370, 369, 284, 284, 
	284, 284, 372, 371, 284, 284, 373, 372, 
	371, 284, 284, 371, 375, 376, 375, 374, 
	374, 374, 374, 378, 377, 374, 374, 379, 
	378, 377, 374, 374, 377, 380, 381, 380, 
	284, 284, 284, 284, 383, 382, 284, 284, 
	384, 383, 382, 284, 284, 382, 385, 386, 
	385, 290, 290, 290, 290, 388, 387, 290, 
	290, 389, 388, 387, 290, 290, 387, 390, 
	391, 390, 290, 290, 290, 290, 393, 392, 
	290, 290, 394, 393, 392, 290, 290, 392, 
	395, 396, 397, 395, 290, 396, 398, 396, 
	290, 399, 290, 400, 290, 400, 401, 401, 
	400, 401, 401, 401, 290, 403, 404, 404, 
	403, 404, 404, 404, 402, 290, 290, 290, 
	406, 405, 290, 290, 407, 406, 405, 290, 
	290, 405, 408, 409, 408, 290, 290, 290, 
	290, 411, 410, 290, 290, 412, 411, 410, 
	290, 290, 410, 413, 414, 413, 284, 284, 
	284, 284, 416, 415, 284, 284, 417, 416, 
	415, 284, 284, 415, 418, 419, 418, 290, 
	290, 290, 290, 421, 420, 290, 290, 422, 
	421, 420, 290, 290, 420, 423, 424, 423, 
	284, 284, 284, 284, 426, 425, 284, 284, 
	427, 426, 425, 284, 284, 425, 428, 429, 
	428, 284, 284, 284, 284, 431, 430, 284, 
	284, 432, 431, 430, 284, 284, 430, 433, 
	434, 433, 290, 290, 290, 290, 436, 435, 
	290, 290, 437, 436, 435, 290, 290, 435, 
	438, 439, 440, 439, 438, 439, 439, 439, 
	290, 290, 290, 290, 442, 441, 290, 290, 
	443, 442, 441, 290, 290, 441, 444, 445, 
	444, 290, 290, 290, 290, 447, 446, 290, 
	290, 448, 447, 446, 290, 290, 446, 449, 
	450, 451, 450, 449, 450, 450, 450, 290, 
	290, 290, 290, 453, 452, 290, 290, 454, 
	453, 452, 290, 290, 452, 455, 456, 455, 
	284, 284, 284, 284, 458, 457, 284, 284, 
	459, 458, 457, 284, 284, 457, 460, 461, 
	460, 290, 290, 290, 290, 463, 462, 290, 
	290, 464, 463, 462, 290, 290, 462, 465, 
	466, 465, 284, 284, 284, 284, 468, 467, 
	284, 284, 469, 468, 467, 284, 284, 467, 
	470, 471, 470, 284, 284, 284, 284, 473, 
	472, 284, 284, 474, 473, 472, 284, 284, 
	472, 475, 476, 475, 284, 284, 284, 284, 
	478, 477, 284, 284, 479, 478, 477, 284, 
	284, 477, 480, 481, 480, 284, 284, 284, 
	284, 483, 482, 284, 284, 484, 483, 482, 
	284, 284, 482, 485, 486, 485, 290, 290, 
	290, 290, 488, 487, 290, 290, 489, 488, 
	487, 290, 290, 487, 490, 491, 490, 290, 
	290, 290, 290, 493, 492, 290, 290, 494, 
	493, 492, 290, 290, 492, 495, 496, 495, 
	290, 290, 290, 290, 498, 497, 290, 290, 
	499, 498, 497, 290, 290, 497, 500, 501, 
	500, 284, 284, 284, 284, 503, 502, 284, 
	284, 504, 503, 502, 284, 284, 502, 505, 
	506, 505, 290, 290, 290, 290, 508, 507, 
	290, 290, 509, 508, 507, 290, 290, 507, 
	510, 511, 510, 284, 284, 284, 284, 513, 
	512, 284, 284, 514, 513, 512, 284, 284, 
	512, 515, 516, 515, 284, 284, 284, 284, 
	518, 517, 284, 284, 519, 518, 517, 284, 
	284, 517, 520, 521, 520, 290, 290, 290, 
	290, 523, 522, 290, 290, 524, 523, 522, 
	290, 290, 522, 525, 526, 525, 290, 290, 
	290, 290, 528, 527, 290, 290, 529, 528, 
	527, 290, 290, 527, 530, 531, 530, 290, 
	290, 290, 290, 533, 532, 290, 290, 534, 
	533, 532, 290, 290, 532, 535, 536, 535, 
	284, 284, 284, 284, 538, 537, 284, 284, 
	539, 538, 537, 284, 284, 537, 540, 541, 
	540, 290, 290, 290, 290, 543, 542, 290, 
	290, 544, 543, 542, 290, 290, 542, 545, 
	546, 545, 290, 290, 290, 290, 548, 547, 
	290, 290, 549, 548, 547, 290, 290, 547, 
	550, 551, 550, 57, 57, 57, 57, 553, 
	552, 57, 57, 554, 553, 552, 57, 57, 
	552, 555, 556, 555, 46, 46, 46, 46, 
	558, 557, 46, 46, 559, 558, 557, 46, 
	46, 557, 560, 561, 560, 46, 46, 46, 
	46, 563, 562, 46, 46, 564, 563, 562, 
	46, 46, 562, 565, 566, 565, 46, 46, 
	46, 46, 568, 567, 46, 46, 569, 568, 
	567, 46, 46, 567, 572, 572, 571, 573, 
	574, 575, 576, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 587, 589, 580, 
	590, 591, 592, 593, 594, 595, 596, 576, 
	597, 598, 599, 600, 601, 602, 603, 604, 
	605, 606, 607, 608, 609, 610, 611, 612, 
	613, 614, 571, 588, 576, 576, 580, 570, 
	615, 40, 616, 617, 41, 0, 16, 16, 
	16, 16, 16, 618, 620, 620, 620, 620, 
	620, 619, 32, 620, 33, 620, 32, 620, 
	620, 620, 619, 33, 620, 620, 33, 620, 
	620, 620, 619, 45, 45, 45, 45, 45, 
	621, 623, 622, 47, 48, 625, 47, 624, 
	51, 51, 51, 626, 52, 53, 52, 624, 
	56, 56, 56, 627, 59, 60, 622, 58, 
	67, 68, 67, 622, 71, 71, 71, 628, 
	576, 576, 576, 576, 576, 0, 72, 73, 
	629, 72, 622, 76, 76, 76, 630, 77, 
	78, 77, 624, 81, 81, 81, 631, 632, 
	633, 622, 82, 83, 87, 82, 624, 86, 
	86, 86, 634, 91, 91, 91, 635, 92, 
	93, 92, 624, 96, 96, 96, 636, 59, 
	98, 622, 97, 105, 106, 105, 622, 109, 
	109, 109, 622, 110, 111, 637, 110, 622, 
	114, 114, 114, 638, 115, 116, 115, 624, 
	119, 119, 119, 639, 120, 640, 121, 641, 
	120, 622, 124, 124, 124, 642, 125, 126, 
	125, 624, 129, 129, 129, 643, 130, 131, 
	130, 622, 134, 134, 134, 644, 135, 640, 
	136, 645, 647, 149, 135, 646, 622, 139, 
	139, 139, 648, 650, 651, 651, 143, 649, 
	651, 651, 141, 649, 143, 649, 650, 651, 
	651, 646, 649, 144, 145, 144, 624, 148, 
	148, 148, 652, 153, 153, 153, 653, 154, 
	155, 154, 622, 158, 158, 158, 654, 159, 
	165, 655, 656, 159, 622, 163, 163, 163, 
	657, 165, 658, 658, 658, 660, 661, 659, 
	658, 658, 662, 661, 659, 658, 658, 662, 
	662, 662, 660, 658, 658, 660, 658, 658, 
	659, 169, 170, 169, 624, 173, 173, 173, 
	663, 576, 650, 665, 576, 665, 664, 576, 
	576, 649, 576, 576, 664, 576, 576, 649, 
	576, 142, 142, 576, 664, 576, 576, 666, 
	576, 650, 665, 576, 665, 588, 576, 576, 
	649, 174, 175, 179, 174, 622, 178, 178, 
	178, 667, 183, 183, 183, 668, 184, 185, 
	669, 670, 184, 622, 188, 188, 188, 671, 
	189, 190, 672, 189, 624, 193, 193, 193, 
	673, 194, 195, 194, 624, 198, 198, 198, 
	674, 199, 200, 199, 624, 203, 203, 203, 
	675, 204, 205, 676, 204, 622, 208, 208, 
	208, 677, 209, 210, 678, 209, 624, 213, 
	213, 213, 679, 214, 215, 214, 624, 218, 
	218, 218, 680, 219, 220, 681, 682, 219, 
	622, 223, 223, 223, 683, 224, 225, 224, 
	624, 228, 228, 228, 684, 229, 230, 685, 
	686, 229, 624, 233, 233, 233, 687, 234, 
	235, 234, 624, 238, 238, 238, 688, 239, 
	240, 689, 239, 624, 243, 243, 243, 690, 
	244, 245, 244, 624, 248, 248, 248, 691, 
	249, 250, 249, 622, 253, 253, 253, 692, 
	254, 255, 254, 622, 258, 258, 258, 693, 
	259, 260, 259, 622, 263, 263, 263, 694, 
	264, 265, 695, 696, 264, 622, 268, 268, 
	268, 697, 269, 270, 269, 624, 273, 273, 
	273, 698, 279, 279, 279, 699, 283, 283, 
	283, 700, 576, 576, 701, 702, 576, 576, 
	576, 666, 576, 576, 703, 576, 576, 576, 
	666, 576, 576, 704, 576, 576, 576, 666, 
	576, 576, 705, 576, 576, 576, 666, 576, 
	576, 706, 576, 576, 576, 666, 576, 576, 
	707, 576, 576, 576, 666, 576, 576, 708, 
	576, 576, 576, 666, 285, 576, 286, 576, 
	285, 576, 576, 576, 709, 289, 289, 289, 
	710, 576, 576, 711, 576, 576, 576, 666, 
	576, 576, 712, 576, 576, 576, 666, 576, 
	576, 713, 576, 576, 576, 666, 576, 576, 
	714, 576, 576, 576, 666, 576, 576, 715, 
	576, 576, 576, 666, 576, 576, 716, 576, 
	576, 576, 666, 576, 576, 717, 718, 719, 
	576, 576, 576, 666, 576, 576, 720, 576, 
	576, 576, 666, 576, 576, 721, 576, 576, 
	576, 666, 576, 576, 722, 576, 576, 576, 
	666, 576, 576, 723, 576, 576, 576, 666, 
	576, 576, 724, 576, 576, 576, 666, 576, 
	576, 725, 576, 576, 576, 666, 576, 576, 
	726, 576, 576, 576, 666, 576, 576, 727, 
	576, 576, 576, 666, 291, 576, 292, 576, 
	291, 576, 576, 576, 728, 295, 295, 295, 
	729, 576, 576, 730, 576, 576, 576, 666, 
	576, 576, 724, 576, 576, 576, 666, 576, 
	576, 731, 732, 733, 734, 735, 576, 576, 
	576, 666, 576, 576, 736, 737, 576, 576, 
	576, 666, 576, 576, 738, 576, 576, 576, 
	666, 296, 576, 297, 576, 296, 576, 576, 
	576, 728, 300, 300, 300, 739, 576, 576, 
	740, 576, 576, 576, 666, 576, 576, 741, 
	576, 576, 576, 666, 301, 576, 302, 576, 
	301, 576, 576, 576, 728, 305, 305, 305, 
	742, 576, 576, 743, 576, 576, 576, 666, 
	576, 576, 724, 576, 576, 576, 666, 576, 
	576, 744, 576, 576, 576, 666, 576, 576, 
	745, 576, 576, 576, 666, 576, 576, 746, 
	576, 576, 576, 666, 306, 576, 308, 576, 
	306, 576, 576, 576, 728, 307, 307, 307, 
	307, 307, 747, 311, 311, 311, 748, 576, 
	576, 749, 576, 576, 576, 666, 576, 576, 
	750, 751, 576, 576, 576, 666, 576, 576, 
	752, 576, 576, 576, 666, 312, 576, 313, 
	576, 312, 576, 576, 576, 728, 316, 316, 
	316, 753, 576, 576, 754, 576, 576, 576, 
	666, 576, 576, 755, 576, 576, 576, 666, 
	576, 576, 756, 576, 576, 576, 666, 576, 
	576, 757, 576, 576, 576, 666, 317, 576, 
	318, 576, 317, 576, 576, 576, 728, 321, 
	321, 321, 758, 576, 576, 759, 576, 576, 
	576, 666, 576, 576, 760, 576, 576, 576, 
	666, 576, 576, 761, 576, 576, 576, 666, 
	763, 576, 323, 576, 764, 763, 576, 576, 
	576, 762, 763, 323, 765, 763, 762, 325, 
	765, 325, 762, 332, 332, 762, 576, 576, 
	766, 576, 576, 576, 666, 576, 576, 767, 
	576, 576, 576, 666, 576, 576, 768, 576, 
	576, 576, 666, 329, 576, 330, 576, 329, 
	576, 576, 576, 666, 576, 576, 769, 770, 
	576, 576, 576, 666, 576, 576, 771, 772, 
	773, 576, 576, 576, 666, 576, 576, 774, 
	576, 576, 576, 666, 576, 576, 775, 576, 
	576, 576, 666, 576, 576, 776, 576, 576, 
	576, 666, 576, 576, 777, 576, 576, 576, 
	666, 576, 576, 778, 576, 576, 576, 666, 
	334, 576, 335, 576, 334, 576, 576, 576, 
	728, 338, 338, 338, 779, 576, 576, 780, 
	576, 576, 576, 666, 576, 576, 781, 576, 
	576, 576, 666, 576, 576, 782, 576, 576, 
	576, 666, 576, 576, 783, 576, 576, 576, 
	666, 339, 576, 340, 576, 339, 576, 576, 
	576, 728, 343, 343, 343, 784, 576, 576, 
	785, 576, 576, 576, 666, 576, 576, 786, 
	576, 576, 576, 666, 576, 576, 787, 576, 
	576, 576, 666, 344, 576, 345, 576, 344, 
	576, 576, 576, 728, 348, 348, 348, 788, 
	349, 576, 350, 576, 789, 349, 576, 576, 
	576, 728, 353, 353, 353, 790, 576, 576, 
	791, 576, 576, 576, 666, 576, 576, 730, 
	576, 576, 576, 666, 576, 576, 792, 793, 
	794, 576, 576, 576, 666, 576, 576, 795, 
	576, 576, 576, 666, 576, 576, 796, 576, 
	576, 576, 666, 354, 576, 355, 576, 354, 
	576, 576, 576, 728, 358, 358, 358, 797, 
	576, 576, 798, 576, 576, 576, 666, 576, 
	576, 799, 576, 576, 576, 666, 359, 576, 
	360, 576, 359, 576, 576, 576, 709, 363, 
	363, 363, 800, 576, 576, 801, 802, 576, 
	576, 576, 666, 576, 576, 803, 576, 576, 
	576, 666, 576, 576, 804, 576, 576, 576, 
	666, 576, 576, 805, 576, 576, 576, 666, 
	364, 576, 365, 576, 364, 576, 576, 576, 
	709, 368, 368, 368, 806, 576, 576, 807, 
	576, 576, 576, 666, 576, 576, 808, 576, 
	576, 576, 666, 576, 576, 809, 576, 576, 
	576, 666, 576, 576, 810, 576, 576, 576, 
	666, 369, 576, 370, 576, 369, 576, 576, 
	576, 709, 373, 373, 373, 811, 576, 576, 
	812, 813, 814, 815, 816, 576, 576, 576, 
	666, 576, 576, 817, 576, 576, 576, 666, 
	576, 576, 818, 576, 576, 576, 666, 576, 
	576, 716, 576, 576, 576, 666, 576, 576, 
	819, 820, 576, 576, 576, 666, 576, 576, 
	821, 576, 576, 576, 666, 576, 576, 822, 
	576, 576, 576, 666, 375, 576, 376, 576, 
	375, 576, 576, 576, 666, 379, 379, 379, 
	823, 576, 576, 824, 576, 576, 576, 666, 
	576, 576, 825, 576, 576, 576, 666, 380, 
	576, 381, 576, 826, 380, 576, 576, 576, 
	709, 384, 384, 384, 827, 576, 576, 828, 
	576, 576, 576, 666, 385, 576, 386, 576, 
	385, 576, 576, 576, 728, 389, 389, 389, 
	829, 576, 576, 830, 576, 576, 576, 666, 
	576, 576, 831, 576, 576, 576, 666, 576, 
	576, 724, 576, 576, 576, 666, 576, 576, 
	832, 576, 576, 576, 666, 390, 576, 391, 
	576, 833, 390, 576, 576, 576, 728, 394, 
	394, 394, 834, 576, 576, 835, 576, 576, 
	576, 666, 576, 576, 836, 576, 576, 576, 
	666, 576, 576, 837, 576, 576, 576, 666, 
	395, 576, 396, 397, 576, 395, 576, 576, 
	576, 728, 839, 401, 403, 401, 839, 401, 
	401, 401, 838, 839, 403, 839, 838, 840, 
	404, 404, 840, 404, 404, 404, 838, 840, 
	840, 838, 407, 407, 407, 841, 576, 576, 
	842, 576, 576, 576, 666, 576, 576, 843, 
	576, 576, 576, 666, 576, 576, 844, 576, 
	576, 576, 666, 576, 576, 845, 576, 576, 
	576, 666, 576, 576, 846, 576, 576, 576, 
	666, 576, 576, 847, 576, 576, 576, 666, 
	408, 576, 409, 576, 408, 576, 576, 576, 
	728, 412, 412, 412, 848, 576, 576, 849, 
	576, 576, 576, 666, 576, 576, 850, 576, 
	576, 576, 666, 576, 576, 851, 576, 576, 
	576, 666, 413, 576, 414, 576, 413, 576, 
	576, 576, 709, 417, 417, 417, 852, 576, 
	576, 853, 854, 855, 576, 576, 576, 666, 
	418, 576, 419, 576, 418, 576, 576, 576, 
	728, 422, 422, 422, 856, 576, 576, 857, 
	576, 576, 576, 666, 576, 576, 858, 859, 
	576, 576, 576, 666, 576, 576, 860, 576, 
	576, 576, 666, 576, 576, 861, 576, 576, 
	576, 666, 576, 576, 862, 576, 576, 576, 
	666, 576, 576, 863, 576, 576, 576, 666, 
	576, 576, 864, 576, 576, 576, 666, 576, 
	576, 865, 576, 576, 576, 666, 423, 576, 
	424, 576, 423, 576, 576, 576, 709, 427, 
	427, 427, 866, 576, 576, 867, 576, 576, 
	576, 666, 576, 576, 868, 576, 576, 576, 
	666, 428, 576, 429, 576, 428, 576, 576, 
	576, 709, 432, 432, 432, 869, 433, 576, 
	434, 576, 870, 871, 872, 433, 576, 576, 
	576, 728, 437, 437, 437, 873, 576, 576, 
	874, 576, 576, 576, 666, 576, 576, 875, 
	576, 576, 576, 666, 576, 576, 876, 576, 
	576, 576, 666, 576, 576, 877, 576, 576, 
	576, 666, 438, 576, 440, 576, 438, 576, 
	576, 576, 728, 439, 439, 439, 439, 439, 
	878, 443, 443, 443, 879, 576, 576, 880, 
	576, 576, 576, 666, 576, 576, 881, 576, 
	576, 576, 666, 576, 576, 882, 576, 576, 
	576, 666, 576, 576, 883, 576, 576, 576, 
	666, 576, 576, 884, 576, 576, 576, 666, 
	576, 576, 885, 576, 576, 576, 666, 576, 
	576, 886, 576, 576, 576, 666, 444, 576, 
	445, 576, 444, 576, 576, 576, 728, 448, 
	448, 448, 887, 576, 576, 888, 576, 576, 
	576, 709, 576, 576, 889, 576, 576, 576, 
	666, 576, 576, 890, 576, 576, 576, 666, 
	576, 576, 891, 576, 576, 576, 666, 576, 
	576, 730, 576, 576, 576, 666, 576, 576, 
	892, 576, 576, 576, 666, 576, 576, 893, 
	576, 576, 576, 666, 576, 576, 724, 576, 
	576, 576, 666, 576, 576, 894, 576, 576, 
	576, 666, 576, 576, 895, 576, 576, 576, 
	666, 576, 576, 896, 576, 576, 576, 666, 
	576, 576, 897, 576, 576, 576, 666, 576, 
	576, 898, 576, 576, 576, 666, 449, 576, 
	451, 576, 449, 576, 576, 576, 728, 450, 
	450, 450, 450, 450, 899, 454, 454, 454, 
	900, 576, 576, 901, 902, 903, 576, 576, 
	576, 666, 576, 576, 904, 576, 576, 576, 
	666, 576, 576, 905, 576, 576, 576, 666, 
	576, 576, 906, 576, 576, 576, 666, 576, 
	576, 907, 576, 576, 576, 666, 455, 576, 
	456, 576, 455, 576, 576, 576, 709, 459, 
	459, 459, 908, 576, 576, 909, 576, 576, 
	576, 666, 460, 576, 461, 576, 460, 576, 
	576, 576, 728, 464, 464, 464, 910, 576, 
	576, 911, 576, 576, 576, 666, 576, 576, 
	716, 576, 576, 576, 666, 576, 576, 912, 
	913, 914, 576, 576, 576, 666, 576, 576, 
	915, 576, 576, 576, 666, 576, 576, 916, 
	576, 576, 576, 666, 576, 576, 917, 576, 
	576, 576, 666, 576, 576, 918, 576, 576, 
	576, 666, 576, 576, 919, 576, 576, 576, 
	666, 465, 576, 466, 576, 465, 576, 576, 
	576, 709, 469, 469, 469, 920, 576, 576, 
	921, 922, 576, 576, 576, 666, 576, 576, 
	923, 576, 576, 576, 666, 576, 576, 924, 
	576, 576, 576, 666, 576, 576, 925, 576, 
	576, 576, 666, 576, 576, 926, 576, 576, 
	576, 666, 470, 576, 471, 576, 470, 576, 
	576, 576, 709, 474, 474, 474, 927, 576, 
	576, 928, 929, 576, 576, 576, 666, 576, 
	576, 930, 576, 576, 576, 666, 576, 576, 
	931, 576, 576, 576, 666, 576, 576, 932, 
	576, 576, 576, 666, 576, 576, 716, 576, 
	576, 576, 666, 576, 576, 933, 576, 576, 
	576, 666, 576, 576, 934, 576, 576, 576, 
	666, 576, 576, 935, 576, 576, 576, 666, 
	576, 576, 936, 576, 576, 576, 666, 576, 
	576, 937, 576, 576, 576, 666, 475, 576, 
	476, 576, 475, 576, 576, 576, 709, 479, 
	479, 479, 938, 576, 576, 939, 576, 576, 
	576, 666, 576, 576, 940, 576, 576, 576, 
	666, 576, 576, 941, 576, 576, 576, 666, 
	576, 576, 942, 576, 576, 576, 666, 480, 
	576, 481, 576, 480, 576, 576, 576, 709, 
	484, 484, 484, 943, 576, 576, 944, 576, 
	576, 576, 666, 576, 576, 945, 576, 576, 
	576, 666, 576, 576, 946, 576, 576, 576, 
	666, 576, 576, 947, 576, 576, 576, 666, 
	576, 576, 948, 576, 576, 576, 666, 485, 
	576, 486, 576, 485, 576, 576, 576, 728, 
	489, 489, 489, 949, 576, 576, 950, 951, 
	952, 953, 954, 576, 576, 576, 666, 576, 
	576, 955, 576, 576, 576, 666, 576, 576, 
	831, 576, 576, 576, 666, 576, 576, 956, 
	576, 576, 576, 666, 576, 576, 957, 576, 
	576, 576, 666, 576, 576, 958, 576, 576, 
	576, 666, 576, 576, 959, 576, 576, 576, 
	666, 490, 576, 491, 576, 490, 576, 576, 
	576, 728, 494, 494, 494, 960, 576, 576, 
	961, 576, 576, 576, 666, 576, 576, 743, 
	576, 576, 576, 666, 576, 576, 962, 576, 
	576, 576, 666, 576, 576, 963, 576, 576, 
	576, 666, 576, 576, 964, 576, 576, 576, 
	666, 576, 576, 965, 576, 576, 576, 666, 
	495, 576, 496, 576, 495, 576, 576, 576, 
	728, 499, 499, 499, 966, 576, 576, 967, 
	576, 576, 576, 666, 576, 576, 968, 576, 
	576, 576, 666, 576, 576, 969, 576, 576, 
	576, 666, 576, 576, 970, 576, 576, 576, 
	666, 576, 576, 971, 576, 576, 576, 666, 
	576, 576, 972, 576, 576, 576, 666, 576, 
	576, 973, 576, 576, 576, 666, 576, 576, 
	974, 576, 576, 576, 666, 576, 576, 975, 
	576, 576, 576, 666, 576, 576, 976, 576, 
	576, 576, 666, 500, 576, 501, 576, 500, 
	576, 576, 576, 709, 504, 504, 504, 977, 
	576, 576, 978, 979, 980, 576, 576, 576, 
	666, 576, 576, 981, 982, 576, 576, 576, 
	666, 576, 576, 716, 576, 576, 576, 666, 
	576, 576, 983, 576, 576, 576, 666, 576, 
	576, 984, 576, 576, 576, 666, 505, 576, 
	506, 576, 985, 505, 576, 576, 576, 728, 
	509, 509, 509, 986, 510, 576, 511, 576, 
	510, 576, 576, 576, 709, 514, 514, 514, 
	987, 576, 576, 988, 818, 989, 576, 576, 
	576, 666, 576, 576, 990, 576, 576, 576, 
	666, 576, 576, 991, 576, 576, 576, 666, 
	576, 576, 992, 576, 576, 576, 666, 576, 
	576, 993, 576, 576, 576, 666, 576, 576, 
	994, 576, 576, 576, 666, 576, 576, 995, 
	576, 576, 576, 666, 515, 576, 516, 576, 
	515, 576, 576, 576, 709, 519, 519, 519, 
	996, 520, 576, 521, 576, 520, 576, 576, 
	576, 728, 524, 524, 524, 997, 576, 576, 
	998, 576, 576, 576, 666, 576, 576, 999, 
	576, 576, 576, 666, 576, 576, 1000, 576, 
	576, 576, 666, 576, 576, 1001, 576, 576, 
	576, 666, 525, 576, 526, 576, 525, 576, 
	576, 576, 728, 529, 529, 529, 1002, 576, 
	576, 1003, 1004, 576, 576, 576, 666, 576, 
	576, 1005, 576, 576, 576, 666, 530, 576, 
	531, 576, 530, 576, 576, 576, 728, 534, 
	534, 534, 1006, 576, 576, 1007, 1008, 576, 
	576, 576, 666, 576, 576, 716, 576, 576, 
	576, 666, 576, 576, 1009, 576, 576, 576, 
	666, 576, 576, 1010, 576, 576, 576, 666, 
	576, 576, 1011, 576, 576, 576, 666, 576, 
	576, 1012, 576, 576, 576, 666, 576, 576, 
	1013, 576, 576, 576, 666, 535, 576, 536, 
	576, 535, 576, 576, 576, 709, 539, 539, 
	539, 1014, 576, 576, 1015, 1016, 576, 576, 
	576, 666, 576, 576, 1017, 576, 576, 576, 
	666, 576, 576, 1018, 576, 576, 576, 666, 
	576, 576, 1019, 576, 576, 576, 666, 540, 
	576, 541, 576, 540, 576, 576, 576, 728, 
	544, 544, 544, 1020, 576, 576, 1021, 576, 
	576, 576, 666, 576, 576, 1022, 576, 576, 
	576, 666, 545, 576, 546, 576, 545, 576, 
	576, 576, 728, 549, 549, 549, 1023, 550, 
	551, 1024, 1025, 550, 622, 554, 554, 554, 
	1026, 555, 556, 555, 624, 559, 559, 559, 
	1027, 560, 561, 565, 560, 624, 564, 564, 
	564, 1028, 569, 569, 569, 1029, 0
};

static const short _dude_trans_targs[] = {
	452, 1, 2, 3, 4, 5, 6, 7, 
	452, 9, 10, 11, 12, 13, 14, 15, 
	454, 17, 18, 23, 19, 20, 21, 22, 
	452, 24, 25, 26, 27, 28, 455, 452, 
	29, 457, 31, 32, 33, 34, 35, 36, 
	8, 37, 38, 39, 40, 458, 452, 41, 
	42, 43, 44, 461, 45, 46, 47, 48, 
	463, 452, 49, 452, 50, 49, 51, 52, 
	53, 54, 49, 55, 56, 57, 58, 466, 
	59, 60, 61, 62, 469, 63, 64, 65, 
	66, 471, 67, 68, 69, 70, 474, 71, 
	72, 73, 74, 475, 75, 76, 77, 78, 
	477, 79, 80, 79, 81, 82, 83, 84, 
	79, 85, 86, 87, 88, 480, 89, 90, 
	91, 92, 482, 93, 94, 95, 96, 484, 
	97, 98, 99, 100, 486, 101, 102, 103, 
	104, 488, 105, 106, 107, 108, 490, 109, 
	110, 111, 112, 492, 452, 494, 115, 495, 
	116, 117, 118, 119, 498, 120, 121, 122, 
	123, 499, 124, 125, 126, 127, 501, 128, 
	129, 130, 131, 503, 133, 132, 134, 135, 
	504, 136, 137, 138, 139, 511, 140, 141, 
	142, 143, 517, 144, 145, 146, 147, 518, 
	148, 149, 150, 151, 520, 152, 153, 154, 
	155, 522, 156, 157, 158, 159, 524, 160, 
	161, 162, 163, 526, 164, 165, 166, 167, 
	528, 168, 169, 170, 171, 530, 172, 173, 
	174, 175, 532, 176, 177, 178, 179, 534, 
	180, 181, 182, 183, 536, 184, 185, 186, 
	187, 538, 188, 189, 190, 191, 540, 192, 
	193, 194, 195, 542, 196, 197, 198, 199, 
	544, 200, 201, 202, 203, 546, 204, 205, 
	206, 207, 548, 208, 209, 210, 211, 550, 
	212, 213, 214, 215, 552, 216, 217, 218, 
	219, 554, 221, 222, 225, 223, 224, 555, 
	226, 227, 228, 556, 452, 229, 230, 231, 
	232, 565, 452, 233, 234, 235, 236, 582, 
	237, 238, 239, 240, 589, 241, 242, 243, 
	244, 593, 245, 600, 246, 247, 248, 601, 
	249, 250, 251, 252, 606, 253, 254, 255, 
	256, 612, 452, 257, 258, 618, 259, 261, 
	262, 263, 264, 265, 619, 266, 267, 268, 
	269, 270, 632, 271, 272, 273, 274, 638, 
	275, 276, 277, 278, 643, 279, 280, 281, 
	282, 645, 283, 284, 285, 286, 652, 287, 
	288, 289, 290, 656, 291, 292, 293, 294, 
	662, 295, 296, 297, 298, 668, 452, 299, 
	300, 301, 302, 677, 303, 304, 305, 306, 
	681, 307, 308, 309, 310, 684, 311, 312, 
	313, 314, 690, 315, 316, 321, 317, 318, 
	319, 695, 452, 320, 697, 322, 323, 699, 
	324, 325, 326, 327, 707, 328, 329, 330, 
	331, 712, 332, 333, 334, 335, 715, 336, 
	337, 338, 339, 725, 340, 341, 342, 343, 
	729, 344, 345, 346, 347, 731, 348, 737, 
	349, 350, 351, 738, 352, 353, 354, 355, 
	747, 356, 762, 357, 358, 359, 763, 360, 
	361, 362, 363, 770, 364, 365, 366, 367, 
	773, 368, 369, 370, 371, 783, 372, 373, 
	374, 375, 790, 376, 377, 378, 379, 802, 
	380, 381, 382, 383, 808, 384, 385, 386, 
	387, 815, 388, 389, 390, 391, 824, 392, 
	393, 394, 395, 832, 396, 397, 398, 399, 
	844, 400, 401, 402, 403, 851, 404, 405, 
	406, 407, 853, 408, 409, 410, 411, 862, 
	412, 413, 414, 415, 864, 416, 417, 418, 
	419, 870, 420, 421, 422, 423, 874, 424, 
	425, 426, 427, 883, 428, 429, 430, 431, 
	889, 432, 433, 434, 435, 893, 436, 437, 
	438, 439, 895, 440, 441, 442, 443, 897, 
	444, 445, 446, 447, 899, 448, 449, 450, 
	451, 900, 452, 453, 453, 459, 464, 465, 
	467, 468, 472, 478, 479, 481, 485, 489, 
	491, 500, 502, 512, 515, 516, 519, 527, 
	533, 545, 547, 549, 551, 557, 572, 585, 
	624, 648, 669, 708, 713, 753, 756, 764, 
	776, 809, 816, 845, 871, 884, 894, 0, 
	16, 30, 452, 452, 456, 452, 452, 460, 
	452, 462, 452, 452, 452, 470, 452, 452, 
	473, 476, 452, 452, 452, 483, 452, 452, 
	452, 487, 452, 452, 452, 493, 496, 497, 
	452, 452, 113, 114, 452, 452, 452, 505, 
	510, 452, 452, 506, 508, 509, 507, 452, 
	513, 514, 452, 452, 452, 521, 525, 452, 
	523, 452, 452, 452, 529, 452, 531, 452, 
	452, 535, 537, 452, 452, 539, 541, 452, 
	452, 543, 452, 452, 452, 452, 452, 553, 
	220, 452, 452, 452, 452, 558, 566, 559, 
	560, 561, 562, 563, 564, 452, 452, 567, 
	568, 569, 570, 571, 467, 573, 578, 583, 
	574, 575, 576, 577, 467, 579, 580, 581, 
	452, 452, 584, 586, 594, 596, 602, 613, 
	587, 590, 588, 452, 591, 592, 452, 595, 
	597, 598, 599, 452, 452, 603, 604, 607, 
	605, 452, 608, 609, 610, 611, 452, 614, 
	615, 616, 452, 617, 620, 260, 621, 622, 
	623, 625, 644, 626, 633, 639, 627, 628, 
	629, 630, 631, 452, 634, 635, 636, 637, 
	452, 640, 641, 642, 452, 646, 452, 647, 
	649, 653, 657, 650, 651, 452, 654, 655, 
	452, 658, 663, 659, 660, 661, 452, 664, 
	665, 666, 667, 452, 670, 673, 685, 688, 
	700, 671, 672, 674, 678, 675, 676, 452, 
	679, 680, 682, 452, 683, 452, 686, 687, 
	689, 691, 452, 692, 693, 694, 452, 696, 
	698, 452, 701, 702, 703, 704, 705, 706, 
	452, 709, 710, 711, 452, 714, 716, 730, 
	452, 717, 718, 726, 719, 720, 721, 722, 
	723, 724, 452, 727, 728, 452, 732, 739, 
	748, 452, 733, 734, 735, 736, 452, 452, 
	740, 741, 742, 743, 744, 745, 746, 452, 
	749, 750, 751, 752, 754, 755, 757, 758, 
	759, 760, 761, 452, 452, 765, 771, 774, 
	766, 767, 768, 769, 452, 772, 452, 775, 
	777, 784, 803, 778, 779, 780, 781, 782, 
	452, 785, 791, 786, 787, 788, 789, 452, 
	792, 796, 793, 794, 795, 797, 798, 799, 
	800, 801, 452, 804, 805, 806, 807, 452, 
	810, 811, 812, 813, 814, 452, 817, 819, 
	825, 827, 833, 818, 820, 821, 822, 823, 
	452, 826, 828, 829, 830, 831, 452, 834, 
	835, 836, 837, 838, 839, 840, 841, 842, 
	843, 452, 846, 854, 865, 847, 848, 849, 
	850, 852, 452, 452, 855, 863, 856, 857, 
	858, 859, 860, 861, 452, 452, 866, 867, 
	868, 869, 452, 872, 875, 873, 452, 876, 
	877, 878, 879, 880, 881, 882, 452, 885, 
	890, 886, 887, 888, 452, 891, 892, 452, 
	896, 898, 452, 452, 452, 452
};

static const short _dude_trans_actions[] = {
	259, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 0, 0, 0, 0, 241, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 251, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 257, 1, 19, 0, 3, 0, 0, 
	0, 0, 5, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 1, 0, 3, 0, 0, 0, 0, 
	5, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 247, 276, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	273, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 253, 0, 7, 0, 
	0, 0, 249, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 245, 0, 0, 267, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 255, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 0, 7, 0, 0, 
	0, 13, 243, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	7, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 23, 270, 264, 0, 261, 13, 
	285, 13, 0, 261, 13, 13, 13, 13, 
	13, 13, 288, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 33, 29, 13, 31, 239, 13, 
	47, 13, 53, 55, 57, 13, 59, 61, 
	13, 13, 63, 65, 67, 13, 69, 71, 
	21, 13, 73, 75, 77, 276, 276, 13, 
	79, 43, 0, 0, 81, 83, 85, 7, 
	13, 87, 41, 0, 0, 0, 0, 89, 
	0, 285, 51, 91, 93, 13, 13, 95, 
	13, 97, 99, 101, 13, 103, 13, 105, 
	107, 13, 13, 109, 111, 13, 13, 113, 
	115, 13, 117, 119, 121, 123, 125, 13, 
	0, 127, 129, 131, 133, 0, 0, 0, 
	0, 0, 0, 0, 13, 49, 143, 0, 
	0, 0, 0, 0, 279, 0, 0, 0, 
	0, 0, 0, 0, 282, 0, 0, 13, 
	45, 145, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 147, 0, 13, 149, 0, 
	0, 0, 13, 25, 151, 0, 0, 0, 
	13, 153, 0, 0, 0, 13, 155, 0, 
	0, 13, 39, 267, 0, 0, 0, 0, 
	285, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 13, 157, 0, 0, 0, 13, 
	159, 0, 0, 13, 161, 0, 163, 0, 
	0, 0, 0, 0, 13, 165, 0, 13, 
	167, 0, 0, 0, 0, 13, 169, 0, 
	0, 0, 13, 171, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 173, 
	0, 13, 0, 175, 13, 177, 0, 0, 
	13, 0, 179, 0, 0, 13, 37, 13, 
	0, 233, 0, 0, 0, 0, 0, 13, 
	181, 0, 0, 13, 183, 13, 0, 13, 
	185, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 187, 0, 13, 189, 0, 0, 
	0, 191, 0, 0, 0, 13, 35, 237, 
	0, 0, 0, 0, 0, 0, 13, 193, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 27, 235, 0, 0, 0, 
	0, 0, 0, 13, 195, 13, 197, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	199, 0, 0, 0, 0, 0, 13, 201, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 203, 0, 0, 0, 13, 205, 
	0, 0, 0, 0, 13, 207, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	209, 0, 0, 0, 0, 13, 211, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 213, 0, 0, 0, 0, 0, 0, 
	13, 13, 215, 217, 0, 13, 0, 0, 
	0, 0, 0, 13, 219, 221, 0, 0, 
	0, 13, 223, 0, 0, 13, 225, 0, 
	0, 0, 0, 0, 0, 13, 227, 0, 
	0, 0, 0, 13, 229, 0, 13, 231, 
	13, 13, 135, 137, 139, 141
};

static const short _dude_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _dude_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _dude_eof_trans[] = {
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 32, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 47, 47, 47, 47, 47, 47, 47, 
	47, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 47, 47, 47, 
	47, 58, 58, 58, 58, 47, 47, 47, 
	47, 58, 58, 58, 58, 58, 58, 58, 
	58, 141, 141, 1, 47, 47, 47, 47, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 1, 1, 1, 
	47, 47, 47, 47, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 58, 58, 58, 58, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	58, 58, 58, 58, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	47, 47, 47, 47, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 285, 285, 285, 
	285, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 323, 323, 323, 323, 323, 323, 1, 
	1, 1, 1, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 375, 375, 375, 375, 285, 
	285, 285, 285, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	403, 291, 291, 291, 291, 291, 291, 291, 
	285, 285, 285, 285, 291, 291, 291, 291, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	285, 285, 285, 285, 291, 291, 291, 291, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 285, 285, 285, 285, 
	291, 291, 291, 291, 285, 285, 285, 285, 
	285, 285, 285, 285, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	285, 285, 285, 285, 291, 291, 291, 291, 
	291, 291, 291, 291, 58, 58, 58, 58, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 0, 1, 619, 620, 
	620, 620, 622, 623, 625, 627, 625, 628, 
	623, 623, 629, 1, 623, 631, 625, 632, 
	623, 625, 635, 636, 625, 637, 623, 623, 
	623, 623, 639, 625, 640, 623, 643, 625, 
	644, 623, 645, 623, 649, 650, 650, 650, 
	650, 625, 653, 654, 623, 655, 623, 658, 
	659, 659, 659, 659, 659, 659, 625, 664, 
	650, 650, 667, 650, 623, 668, 669, 623, 
	672, 625, 674, 625, 675, 625, 676, 623, 
	678, 625, 680, 625, 681, 623, 684, 625, 
	685, 625, 688, 625, 689, 625, 691, 625, 
	692, 623, 693, 623, 694, 623, 695, 623, 
	698, 625, 699, 700, 701, 667, 667, 667, 
	667, 667, 667, 667, 710, 711, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 729, 730, 667, 
	667, 667, 667, 667, 729, 740, 667, 667, 
	729, 743, 667, 667, 667, 667, 667, 729, 
	748, 749, 667, 667, 667, 729, 754, 667, 
	667, 667, 667, 729, 759, 667, 667, 667, 
	763, 763, 763, 763, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 729, 
	780, 667, 667, 667, 667, 729, 785, 667, 
	667, 667, 729, 789, 729, 791, 667, 667, 
	667, 667, 667, 729, 798, 667, 667, 710, 
	801, 667, 667, 667, 667, 710, 807, 667, 
	667, 667, 667, 710, 812, 667, 667, 667, 
	667, 667, 667, 667, 667, 824, 667, 667, 
	710, 828, 667, 729, 830, 667, 667, 667, 
	667, 729, 835, 667, 667, 667, 729, 839, 
	839, 839, 839, 842, 667, 667, 667, 667, 
	667, 667, 729, 849, 667, 667, 667, 710, 
	853, 667, 729, 857, 667, 667, 667, 667, 
	667, 667, 667, 667, 710, 867, 667, 667, 
	710, 870, 729, 874, 667, 667, 667, 667, 
	729, 879, 880, 667, 667, 667, 667, 667, 
	667, 667, 729, 888, 710, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 729, 900, 901, 667, 667, 667, 667, 
	667, 710, 909, 667, 729, 911, 667, 667, 
	667, 667, 667, 667, 667, 667, 710, 921, 
	667, 667, 667, 667, 667, 710, 928, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 710, 939, 667, 667, 667, 667, 710, 
	944, 667, 667, 667, 667, 667, 729, 950, 
	667, 667, 667, 667, 667, 667, 667, 729, 
	961, 667, 667, 667, 667, 667, 667, 729, 
	967, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 710, 978, 667, 667, 667, 
	667, 667, 729, 987, 710, 988, 667, 667, 
	667, 667, 667, 667, 667, 710, 997, 729, 
	998, 667, 667, 667, 667, 729, 1003, 667, 
	667, 729, 1007, 667, 667, 667, 667, 667, 
	667, 667, 710, 1015, 667, 667, 667, 667, 
	729, 1021, 667, 667, 729, 1024, 623, 1027, 
	625, 1028, 625, 1029, 1030
};

static const int dude_start = 452;
static const int dude_first_final = 452;
static const int dude_error = -1;

static const int dude_en_main = 452;


#line 518 "tokenizer.rl"
      
#line 2476 "tokenizer.c"
	{
	cs = dude_start;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 519 "tokenizer.rl"
      
#line 2486 "tokenizer.c"
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _dude_actions + _dude_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 6:
#line 1 "tokenizer.rl"
	{ts = p;}
	break;
#line 2505 "tokenizer.c"
		}
	}

	_keys = _dude_trans_keys + _dude_key_offsets[cs];
	_trans = _dude_index_offsets[cs];

	_klen = _dude_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dude_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dude_indicies[_trans];
_eof_trans:
	cs = _dude_trans_targs[_trans];

	if ( _dude_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dude_actions + _dude_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 9 "tokenizer.rl"
	{
  }
	break;
	case 1:
#line 12 "tokenizer.rl"
	{
  }
	break;
	case 2:
#line 15 "tokenizer.rl"
	{
  }
	break;
	case 3:
#line 18 "tokenizer.rl"
	{
  }
	break;
	case 4:
#line 96 "tokenizer.rl"
	{regexp_start = p;}
	break;
	case 7:
#line 1 "tokenizer.rl"
	{te = p+1;}
	break;
	case 8:
#line 128 "tokenizer.rl"
	{act = 1;}
	break;
	case 9:
#line 253 "tokenizer.rl"
	{act = 11;}
	break;
	case 10:
#line 264 "tokenizer.rl"
	{act = 12;}
	break;
	case 11:
#line 265 "tokenizer.rl"
	{act = 13;}
	break;
	case 12:
#line 268 "tokenizer.rl"
	{act = 15;}
	break;
	case 13:
#line 269 "tokenizer.rl"
	{act = 16;}
	break;
	case 14:
#line 272 "tokenizer.rl"
	{act = 18;}
	break;
	case 15:
#line 273 "tokenizer.rl"
	{act = 19;}
	break;
	case 16:
#line 370 "tokenizer.rl"
	{act = 113;}
	break;
	case 17:
#line 146 "tokenizer.rl"
	{te = p+1;{
      if (in_class && in_class == curly_idx) {
              curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_PRIVATE;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

              if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

      }
    }}
	break;
	case 18:
#line 189 "tokenizer.rl"
	{te = p+1;{
      if (in_class && in_class == curly_idx) {
              close_on_semi = 1;
      start_argv[0] = sym_ACCESSOR;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      }
    }}
	break;
	case 19:
#line 267 "tokenizer.rl"
	{te = p+1;}
	break;
	case 20:
#line 271 "tokenizer.rl"
	{te = p+1;{ }}
	break;
	case 21:
#line 370 "tokenizer.rl"
	{te = p+1;{
      char single = data[ts-data];

      if (single == '{') {
        in_foreach = 0;
        cb_count++;
      } else if (single == '}') {
        cb_count--;
        if (curly_idx && curlies[curly_idx] == cb_count) {
          in_foreach = 0;
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          if (curlies[in_class] == cb_count) {
            in_class = 0;
          }
        }
      } else if (single == ';' && close_on_semi == 1) {
              close_on_semi = 0;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

      }

      if (single == ';' || single == '}') {
        classable = 1;
      }

      if (single == '(') {
        br_count++;
      } else if (single == ')') {
        br_count--;
        if (mark_on_br == br_count) {
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          mark_on_br = -1;
        }
      }
    }}
	break;
	case 22:
#line 132 "tokenizer.rl"
	{te = p;p--;{
      if (in_class == 0) {
              curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_CLASS;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

        in_class = curly_idx;
      }
    }}
	break;
	case 23:
#line 163 "tokenizer.rl"
	{te = p;p--;{
      if (in_class == 0) {
              curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_MODULE;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

        in_class = curly_idx;
      }
    }}
	break;
	case 24:
#line 177 "tokenizer.rl"
	{te = p;p--;{
      if (in_class && in_class == curly_idx) {
              close_on_semi = 1;
      start_argv[0] = sym_PROPERTY;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      }
    }}
	break;
	case 25:
#line 202 "tokenizer.rl"
	{te = p;p--;{
      if (in_class && in_class == curly_idx) {
              close_on_semi = 1;
      start_argv[0] = sym_MEMBER;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      }
    }}
	break;
	case 26:
#line 214 "tokenizer.rl"
	{te = p;p--;{
      if (in_class && in_class == curly_idx) {
              curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_METHOD;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      }
    }}
	break;
	case 27:
#line 228 "tokenizer.rl"
	{te = p;p--;{
      if (in_class && in_class == curly_idx) {
              close_on_semi = 1;
      start_argv[0] = sym_INCLUDE;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      }
    }}
	break;
	case 28:
#line 240 "tokenizer.rl"
	{te = p;p--;{
            curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_FOREACH;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      mark_on_br = br_count;
      br_count++;
    }}
	break;
	case 29:
#line 253 "tokenizer.rl"
	{te = p;p--;{
            curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_CURRY;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

    }}
	break;
	case 30:
#line 265 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 31:
#line 268 "tokenizer.rl"
	{te = p;p--;}
	break;
	case 32:
#line 269 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 33:
#line 271 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 34:
#line 272 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 35:
#line 273 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 36:
#line 275 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 37:
#line 276 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 38:
#line 277 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 39:
#line 278 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 40:
#line 279 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 41:
#line 280 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 42:
#line 281 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 43:
#line 282 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 44:
#line 283 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 45:
#line 284 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 46:
#line 285 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 47:
#line 286 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 48:
#line 287 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 49:
#line 288 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 50:
#line 289 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 51:
#line 290 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 52:
#line 291 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 53:
#line 292 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 54:
#line 293 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 55:
#line 294 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 56:
#line 295 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 57:
#line 296 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 58:
#line 297 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 59:
#line 298 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 60:
#line 299 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 61:
#line 300 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 62:
#line 301 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 63:
#line 302 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 64:
#line 303 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 65:
#line 304 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 66:
#line 305 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 67:
#line 306 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 68:
#line 307 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 69:
#line 308 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 70:
#line 309 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 71:
#line 310 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 72:
#line 311 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 73:
#line 312 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 74:
#line 313 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 75:
#line 314 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 76:
#line 315 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 77:
#line 316 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 78:
#line 317 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 79:
#line 318 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 80:
#line 319 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 81:
#line 320 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 82:
#line 321 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 83:
#line 322 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 84:
#line 323 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 85:
#line 324 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 86:
#line 325 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 87:
#line 326 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 88:
#line 327 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 89:
#line 328 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 90:
#line 329 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 91:
#line 330 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 92:
#line 331 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 93:
#line 332 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 94:
#line 333 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 95:
#line 334 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 96:
#line 335 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 97:
#line 336 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 98:
#line 337 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 99:
#line 338 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 100:
#line 339 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 101:
#line 340 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 102:
#line 341 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 103:
#line 342 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 104:
#line 343 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 105:
#line 344 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 106:
#line 345 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 107:
#line 346 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 108:
#line 347 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 109:
#line 348 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 110:
#line 349 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 111:
#line 350 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 112:
#line 351 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 113:
#line 352 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 114:
#line 353 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 115:
#line 354 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 116:
#line 355 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 117:
#line 356 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 118:
#line 357 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 119:
#line 358 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 120:
#line 359 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 121:
#line 360 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 122:
#line 361 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 123:
#line 362 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 124:
#line 363 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 125:
#line 364 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 126:
#line 365 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 127:
#line 366 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 128:
#line 367 "tokenizer.rl"
	{te = p;p--;{ }}
	break;
	case 129:
#line 370 "tokenizer.rl"
	{te = p;p--;{
      char single = data[ts-data];

      if (single == '{') {
        in_foreach = 0;
        cb_count++;
      } else if (single == '}') {
        cb_count--;
        if (curly_idx && curlies[curly_idx] == cb_count) {
          in_foreach = 0;
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          if (curlies[in_class] == cb_count) {
            in_class = 0;
          }
        }
      } else if (single == ';' && close_on_semi == 1) {
              close_on_semi = 0;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

      }

      if (single == ';' || single == '}') {
        classable = 1;
      }

      if (single == '(') {
        br_count++;
      } else if (single == ')') {
        br_count--;
        if (mark_on_br == br_count) {
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          mark_on_br = -1;
        }
      }
    }}
	break;
	case 130:
#line 177 "tokenizer.rl"
	{{p = ((te))-1;}{
      if (in_class && in_class == curly_idx) {
              close_on_semi = 1;
      start_argv[0] = sym_PROPERTY;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      }
    }}
	break;
	case 131:
#line 240 "tokenizer.rl"
	{{p = ((te))-1;}{
            curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_FOREACH;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

      mark_on_br = br_count;
      br_count++;
    }}
	break;
	case 132:
#line 253 "tokenizer.rl"
	{{p = ((te))-1;}{
            curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_CURRY;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

    }}
	break;
	case 133:
#line 268 "tokenizer.rl"
	{{p = ((te))-1;}}
	break;
	case 134:
#line 269 "tokenizer.rl"
	{{p = ((te))-1;}{ }}
	break;
	case 135:
#line 271 "tokenizer.rl"
	{{p = ((te))-1;}{ }}
	break;
	case 136:
#line 272 "tokenizer.rl"
	{{p = ((te))-1;}{ }}
	break;
	case 137:
#line 273 "tokenizer.rl"
	{{p = ((te))-1;}{ }}
	break;
	case 138:
#line 370 "tokenizer.rl"
	{{p = ((te))-1;}{
      char single = data[ts-data];

      if (single == '{') {
        in_foreach = 0;
        cb_count++;
      } else if (single == '}') {
        cb_count--;
        if (curly_idx && curlies[curly_idx] == cb_count) {
          in_foreach = 0;
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          if (curlies[in_class] == cb_count) {
            in_class = 0;
          }
        }
      } else if (single == ';' && close_on_semi == 1) {
              close_on_semi = 0;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

      }

      if (single == ';' || single == '}') {
        classable = 1;
      }

      if (single == '(') {
        br_count++;
      } else if (single == ')') {
        br_count--;
        if (mark_on_br == br_count) {
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          mark_on_br = -1;
        }
      }
    }}
	break;
	case 139:
#line 1 "tokenizer.rl"
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} 
      //line_number++;
    }
	break;
	case 11:
	{{p = ((te))-1;}
            curlies[++curly_idx] = cb_count;;

      start_argv[0] = sym_CURRY;
      start_argv[1] = INT2FIX(ts-data);
      start_argv[2] = INT2FIX(is_static);
      rb_funcall2(self, start_sym, 3, start_argv);
      is_static = 0;

    }
	break;
	case 12:
	{{p = ((te))-1;}}
	break;
	case 13:
	{{p = ((te))-1;} }
	break;
	case 15:
	{{p = ((te))-1;}}
	break;
	case 16:
	{{p = ((te))-1;} }
	break;
	case 18:
	{{p = ((te))-1;} }
	break;
	case 19:
	{{p = ((te))-1;} }
	break;
	case 113:
	{{p = ((te))-1;}
      char single = data[ts-data];

      if (single == '{') {
        in_foreach = 0;
        cb_count++;
      } else if (single == '}') {
        cb_count--;
        if (curly_idx && curlies[curly_idx] == cb_count) {
          in_foreach = 0;
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          if (curlies[in_class] == cb_count) {
            in_class = 0;
          }
        }
      } else if (single == ';' && close_on_semi == 1) {
              close_on_semi = 0;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

      }

      if (single == ';' || single == '}') {
        classable = 1;
      }

      if (single == '(') {
        br_count++;
      } else if (single == ')') {
        br_count--;
        if (mark_on_br == br_count) {
                if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(te-data);
      rb_funcall2(self, stop_sym, 1, stop_argv);

          mark_on_br = -1;
        }
      }
    }
	break;
	}
	}
	break;
#line 3471 "tokenizer.c"
		}
	}

_again:
	_acts = _dude_actions + _dude_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 5:
#line 1 "tokenizer.rl"
	{ts = 0;}
	break;
#line 3484 "tokenizer.c"
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _dude_eof_trans[cs] > 0 ) {
		_trans = _dude_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

#line 520 "tokenizer.rl"

            if (curly_idx) curly_idx--;
      stop_argv[0] = INT2FIX(data_length-1);
      rb_funcall2(self, stop_sym, 1, stop_argv);

    }

    END
  end

  def warn_int (int)
    puts int.to_s
  end

  def start_node (type, idx, is_static)
    @lexer.start_node(type, idx, is_static == 1)
  end

  def stop_node (idx)
    @lexer.stop_node(idx)
  end

  def mark_node (idx)
    @lexer.mark_node(idx)
  end

  def tokenize! (data, lexer)
    @data  = data
    @lexer = JS2::Parser::Lexer.new(data)
    self.tokenize(data)
  end

end
