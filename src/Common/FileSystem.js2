class FileSystem {
  function initialize(adapter) {
    this.adapter = adapter;
  }

  function find(dir, ext, recursive) {
    return this._find(this.expandPath(dir), new RegExp('\\.' + ext + '$'), recursive);
  }

  function _find(dir, regex, recursive) {
    if (!this.isDirectory(dir))  return [];

    var parts = this.adapter.readdir(dir); 

    var files = js2();
    var self = this;

    js2(parts).reject(/^\.\.?$/).each(#{
      var file = dir + '/' + $1;
      if (self.isFile(file) && file.match(regex)) {
        files.push(file); 
      } else if (self.isDirectory(file)) {
        var found = self._find(file, regex, recursive);
        for (var i=0; i<found.length; i++) {
          files.push(found[i]); 
        }
      }
    });

    return files;
  }

  function canonical(file) {
    var abs = this.expandPath(file);
    abs = abs.replace(/\/$/, '');
    return abs;
  }

  function mkpath(file) {
    var dirname = this.canonical(this.dirname(file));

    var subdirs = js2(dirname.split('/'));
    subdirs.shift();
    var toMake = '';

    var self = this;
    subdirs.each(#{
      toMake += '/' + $1;
      self.mkdir(toMake); 
    });
  }

  // ADAPTER USAGE
  function dirname(file) {
    return this.adapter.dirname(file);
  }

  function readdir(file) {
    return this.adapter.readdir(file);
  }

  function read(file) {
    var data = this.adapter.read(file);
    return data;
  }

  function write(file, data) {
    return this.adapter.write(file, data);
  }

  function mtime(file) {
    return this.adapter.mtime(file);
  }

  function exists(file) {
    return this.isDirectory(file) || this.isFile(file);
  }

  function mkdir(file) {
    if (!this.exists(file)) {
      return this.adapter.mkdir(file);
    }
  }

  function isFile(file) {
    try {
      return this.adapter.isFile(file);
    } catch(e) {
      return false;
    }
  }

  function setInterval(code, interval) {
    return this.adapter.setInterval(code, interval);
  }

  function isDirectory(file) {
    try {
      return this.adapter.isDirectory(file);
    } catch(e) {
      return false;
    }
  }

  function expandPath(file) {
    return this.adapter.expandPath(file);
  }
}
