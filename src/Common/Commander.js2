class Commander {
  var BANNER = 
    "js2 <command> [options] <arguments>\n" +
    "Commands:\n" +
    "  * run <file>                -- Executes file\n" +
    "  * render <file>             -- Shows JS2 compiled output\n" +
    "  * compile <inDir> [outDir]  -- Compiles a directory and puts js files into outDir.  If outDir is not specified, inDir will be used\n" + 
    "    Options:\n" +
    "      -r                      -- Traverse directories recursively\n" +
    "  * compile <file>            -- Compiles a single js2 file into js\n" +
    "  * watch <inDir> <outDir>    -- Similar to compile, but update will keep looping while watching for modifications\n" +
    "    Options:\n" +
    "      -r                      -- Traverse directories recursively\n" +
    "      -i=<seconds>            -- Interval time in seconds between loops\n";

  function initialize (argv) {
    this.argv = argv;
    this.command = this.argv.shift();
    this.fs      = JS2.fs;
    this.parseOpts(argv);
  }

  function cli() {
    if (this[this.command]) {
      this[this.command](this.argv);
    } else {
      this.showBanner();
    }
  }

  function render(argv) {
    console.log(js2.render(this.fs.read(argv[0])));
  }

  function run(argv) {
    var file;
    var i = 0;
    while (file = argv[i++]) {
      eval(js2.render(this.fs.read(file))); 
    }
  }

  var options = {
    'r': 'recursive',
    'i': 'interval'
  };

  function parseOpts(argv) {
    this.opts = { main: [] };
    var opts = this.opts;
    for (var i=0; i<argv.length; i++) {
      var arg = argv[i];
      if (arg.match(/^-(\w)(=(.*))?$/)) {
        opts[this.options[arg[1]]] = arg[3] || true;
      } else {
        opts.main.push(arg); 
      }
    }
  }

  function compile() {
    var inDir = this.opts.main[0];
    this.getUpdater().update();
  }

  function getUpdater() {
    var inDir  = this.opts.main[0] || '.';
    var outDir = this.opts.main[1] || inDir;
    return new JS2.Updater(this.fs, inDir, outDir);
  }

  function watch() {
    var updater = this.getUpdater();
    var self = this;
    var interval = this.opts.interval || 2;
    console.log('Input Directory:' + updater.inDir + ' -> Output Directory:' + updater.outDir);
    if (updater.recursive) console.log('RECURSIVE');

    // HACK to get this integrated with ruby
    updater.update();
    setInterval(#{ console.log('updating'); updater.update() }, interval * 1000);
  }

  function showBanner() {
    console.log(this.BANNER);
  }
}

