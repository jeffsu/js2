class Commander {
  var BANNER = 
    "js2 <command> [options] <arguments>\n" +
    "Commands:\n" +
    "  * run <file>                -- Executes file\n" +
    "  * render <file>             -- Shows JS2 compiled output\n" +
    "  * compile <inDir> [outDir]  -- Compiles a directory and puts js files into outDir.  If outDir is not specified, inDir will be used\n" + 
    "    Options:\n" +
    "      -n                      -- Do NOT traverse directories recursively\n" +
    "      -f=<format>             -- Compile for different formats: node, ringo, or browser\n" +
    "  * compile <file>            -- Compiles a single js2 file into js\n" +
    "  * watch <inDir> <outDir>    -- Similar to compile, but update will keep looping while watching for modifications\n" +
    "    Options:\n" +
    "      -n                      -- Do NOT traverse directories recursively\n" +
    "      -f=<format>             -- Compile for different formats: node, ringo, or browser\n" +
    "      -i=<seconds>            -- Interval time in seconds between loops\n";

  var DEFAULT_CONFIG = {
    compile: { inDir: 'src', outDir: 'lib', recursive: true, decorator: 'Node'  },
    watch: { inDir: 'src', outDir: 'lib', recursive: true, decorator: 'Node' }
  };

  function initialize (argv) {
    this.fs      = JS2.fs;
    this.config  = new JS2.Config(this.fs, argv);
    this.command = this.config.command;
  }

  function cli() {
    if (this[this.command]) {
      this[this.command]();
    } else {
      this.showBanner();
    }
  }

  function render() {
    console.log(js2.render(this.fs.read(this.config.args[0])));
  }

  function run() {
    var file;
    var i = 0;
    while (file = this.config.args[i++]) {
      eval(js2.render(this.fs.read(file))); 
    }
  }

  function compile() {
    var self = this;
    this.getUpdater().update(true, #{ return JS2.DECORATOR.file($1); });
  }

  function getUpdater() {
    var inDir  = this.config.args[0] || this.config.inDir || '.';
    var outDir = this.config.args[1] || this.config.outDir || inDir;
    return new JS2.Updater(this.fs, inDir, outDir, this.config.recursive);
  }

  function watch() {
    var updater = this.getUpdater();
    var self = this;
    var interval = this.config.interval || 2;
    console.log('Input Directory:' + updater.inDir + ' -> Output Directory:' + updater.outDir);
    if (updater.recursive) console.log('RECURSIVE');

    // HACK to get this integrated with ruby
    updater.update();
    setInterval(#{ console.log('updating'); updater.update(true, #{ return JS2.DECORATOR.file($1); }); }, interval * 1000);
  }

  function showBanner() {
    console.log(this.BANNER);
  }
}

