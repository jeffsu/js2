class Commander {
  var BANNER = 
    "js2 <command> [options] <arguments>\n" +
    "VERSION: " + JS2.VERSION + "\n" +
    "Commands:\n" +
    "  * run <file>                         -- Executes file\n" +
    "  * render <file>                      -- Shows JS2 compiled output\n" +
    "  * compile <source dir> [target dir]  -- Compiles a directory and puts js files into target dir.  If target dir is not specified, source dir will be used\n" + 
    "    Options:\n" +
    "      -n                               -- Do NOT traverse directories recursively\n" +
    "      -v                               -- Verbose \n" +
    "      -f=<format>                      -- Compile for different formats: node, ringo, or browser\n" +
    "  * compile <file>                     -- Compiles a single js2 file into js\n" +
    "  * watch <source dir> <target dir>    -- Similar to compile, but update will keep looping while watching for modifications\n" +
    "    Options:\n" +                      
    "      -n                               -- Do NOT traverse directories recursively\n" +
    "      -f=<format>                      -- Compile for different formats: node, ringo, or browser\n" +
    "      -v                               -- Verbose \n" +
    "      -i=<seconds>                     -- Interval time in seconds between loops\n";

  function initialize (argv) {
    this.fs      = JS2.fs;
    this.config  = new JS2.Config(this.fs, argv);
    this.command = this.config.command;

    // HACK for now
    JS2.VERBOSE = this.config.verbose || false;
    JS2.LOGGER  = { info: #{ if (JS2.VERBOSE) console.log($1) } };

    switch(this.config.format) {
      case 'ringo':    JS2.DECORATOR = new JS2.RingoDecorator(); break;
      case 'node':     JS2.DECORATOR = new JS2.NodeDecorator(); break;
      default:  JS2.DECORATOR = new JS2.BrowserDecorator(); break;
    }
  }

  function cli() {
    if (this[this.command]) {
      this[this.command]();
    } else {
      this.showBanner();
    }
  }

  function render() {
    JS2.LOGGER.info(js2.render(this.fs.read(this.config.args[0])));
  }

  function run() {
    var file;
    var i = 0;
    while (file = this.config.args[i++]) {
      eval(js2.render(this.fs.read(file))); 
    }
  }

  function compile() {
    var self = this;
    var force = this.config['use-mtime'] ? false : true;
    this.getUpdater().update(force, #{ return JS2.DECORATOR.file($1); });
  }

  function getUpdater() {
    var inDir     = this.config.args[0] || this.config.sourceDir || '.';
    var targetDir = this.config.args[1] || this.config.outDir || inDir;
    return new JS2.Updater(this.fs, inDir, targetDir, this.config.recursive);
  }

  function watch() {
    var updater = this.getUpdater();
    var self = this;
    var interval = this.config.interval || 2;
    JS2.LOGGER.info('Source Directory:' + updater.inDir + ' -> Target Directory:' + updater.targetDir);
    if (updater.recursive) JS2.LOGGER.info('RECURSIVE');

    // HACK to get this integrated with ruby
    var decor = #{ return JS2.DECORATOR.file($1) };
    updater.update(true, decor);
    this.fs.setInterval(#{ JS2.LOGGER.info('updating'); updater.update(false, decor); }, interval * 1000);
  }

  function showBanner() {
    console.log(this.BANNER);
  }
}

