class JSML {
  static function process(txt) {
    return new KLASS(txt);
  }

  function initialize(txt) {
    var lines = txt.split(/\n/);
    this.root    = new JSMLElement;
    this.current = this.root;
    this.stack   = [ this.root ];

    foreach (var l in lines) {
      this.processLine(l);
    }
  }

  function processLine(line) {
    var ele  = new JSMLElement(line);
    var scope = this.getScope();

    if (ele.scope == scope) {
      this.stack.pop();
      this.getLast().push(ele);
    } else if (ele.scope == scope+1) {
      this.getLast().push(ele); 
      this.stack.push(ele);
    } else if (ele.scope < scope) {
      var diff = ele.scope - scope;
      while(diff-- != 0) {
        this.stack.pop();
      }
      this.getLast().push(ele);
    }
  }


  function getScope() {
    return this.stack.length-1;
  }

  function getLast() {
    return this.root[this.root.length-1];
  }

  function processClasses(ele, str) {
    var self = this;
    str.replace(this.CLASSES_AND_IDS, #(match, type, name){
      if (type == '.') {
        ele.addClass(name);
      } else if (type == '#') {
        ele.setID(name);
      }
    });
  }
}

class JSMLElement {
  var FIRST_PASS      = /^((?:\s{2})+)(if|foreach|\.|#|\w+)(.*)/;
  var CLASSES_AND_IDS = /(#|\.)([\-w]+)/g;

  function initialize(line) {
    this.parse(line);
    this.children = [];
  }

  function push(ele) {
    this.children.push(ele);
  }

  function parse(line) {
    var m = line.match(FIRST_PASS);
    this.scope = m[1].length / 2;
  }
}
