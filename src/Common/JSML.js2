class JSML {
  static function process(txt) {
    return new KLASS(txt);
  }

  function initialize(txt) {
    var lines = txt.split(/\n/);
    this.root    = new JS2.JSMLElement();
    this.current = this.root;
    this.stack   = [ this.root ];

    foreach (var l in lines) {
      if (l.match(/^\s*$/)) continue;
      this.processLine(l);
    }
  }

  function result() {
    return "hello";
  }

  function processLine(line) {
    var ele   = new JS2.JSMLElement(line);
    var scope = this.getScope();

    if (ele.scope == scope) {
      console.log('same');
      this.stack.pop();
      this.getLast().push(ele);
    } else if (ele.scope == scope+1) {
      console.log('greater');
      this.getLast().push(ele); 
      this.stack.push(ele);
    } else if (ele.scope < scope) {
      console.log('less');
      var diff = scope - ele.scope;
      while(diff-- > 0) {
        this.stack.pop();
      }
      this.getLast().push(ele);
    }
  }


  function getScope() {
    return this.stack.length;
  }

  function getLast() {
    return this.stack[this.stack.length-1];
  }

}

class JSMLElement {
  var SCOPE_REGEX  = /^(\s*)(.*)$/;
  var TOKEN_REGEX  = /^(\%|\#|\.)([\w-]+)/;
  var JS_REGEX     = /^(-|=)(.*)$/;

  function initialize(line) {
    this.children = [];

    if (line == null) {
      this.scope = 0;
      return;
    }

    var spaceMatch = line.match(this.SCOPE_REGEX);
    this.scope = spaceMatch[1].length / 2;

    this.classes  = [];
    this.nodeID   = null;

    this.parse(spaceMatch[2]);
  }

  function push(child) {
    this.children.push(child);
  }

  function parse(line) {
    var self = this;
    console.log(line);
    line = line.replace(this.TOKEN_REGEX, #(match, type, name) { 
      switch(type) {
        case '%': self.nodeType = name; break;
        case '.': self.classes.push(name); break;
        case '#': self.nodeID = name; break;
      } 
      return '';
    });

    line = line.replace(this.JS_REGEX, #(match, type, content) {
      switch(type) {
        case '=': self.jsEQ = content; break;
        case '-': self.jsExec = content; break;
      }
      return '';
    });
  }

  function toString() {
    var out = [];
    foreach (var c in this.children) {
      out.push(c.toString());
    }

    if (this.jsEQ) {
      
    }
  }
}
