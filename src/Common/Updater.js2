class Updater {
  function initialize(fs, inDir, outDir, recursive) {
    this.recursive = recursive;
    this.fs        = fs; 
    this.inDir     = this.fs.canonical(inDir);
    this.targetDir = this.fs.canonical(outDir);
    this.verbose = true;
  }

  function update(force, funct) {
    var self = this;
    this.matchDirs(this.inDir);
    this.fs.find(this.inDir, 'js2', this.recursive).each(#{
      self.tryUpdate($1, force, funct); 
    });
  }

  function matchDirs(dir) {
    var subs = this.fs.readdir(dir);
    foreach (var sub in subs) {
      var path = dir + '/' + sub;
      if (this.fs.isDirectory(path)) {
        this.fs.mkdir(path.replace(this.inDir, this.targetDir));
        this.matchDirs(path);
      }
    }
  }

  function tryUpdate(file, force, funct) {
    var outFile = file.replace(this.inDir, this.targetDir).replace(/\.js2$/, '.js');

    var dir = this.fs.dirname(file);
    if (! this.fs.isDirectory(dir)) this.fs.mkpath(dir);

    if (force || this.fs.mtime(file) > this.fs.mtime(outFile)) {
      JS2.LOGGER.info(file + ' -> ' + outFile);
      if (funct) {
        this.fs.write(outFile, funct(JS2(this.fs.read(file))));
      } else {
        this.fs.write(outFile, JS2(this.fs.read(file)));
      }
    }
  }
}
